// Lifetime Plugin for Tennu
//
// State Machine for the state of the client.
//
// States
// ------
// initializing (default state)
// initialized  (end of Tennu.Client ctor)
// unstartable  (crash whlie in previous two states)
// started      (socket emits running event)
// running      (TBD: when identified & joined all autojoined channels)
// dying        (this.exports.die called)
// dead         (all onDie callbacks called, connection closed)
// restarting   (this.exports.restart called + reasons for dead)
// rehashing    (this.rehash called)
const format = require('util').format;
const EventEmitter = require('events').EventEmitter;
const has = function (element, array) {
    return array.indexOf(element) !== -1;
};
module.exports = {
    init: function (client) {
        var state = 'initializing';
        const emitter = new EventEmitter();
        const strictMode = client.config('strict-lifecycle') || false;
        const alwaysRestart = client.config('always-restart') || false;
        var shouldRestart = alwaysRestart;
        function inState(states) {
            return states.indexOf(state) !== -1;
        }
        ;
        function edgeState() {
            return inState([
                'unstartable',
                'crashed',
                'dead'
            ]);
        }
        function die(from, cause, deathData) {
            if (edgeState())
                return;
            if (state !== 'running') {
                crash();
                return;
            }
            setState('dying', from, cause, deathData);
        }
        ;
        function restart(from, reason) {
            if (inState([
                    'dying',
                    'dead',
                    'unstartable'
                ])) {
                return;
            }
            if (inState([
                    'initializing',
                    'initialized'
                ])) {
                if (strictMode) {
                    client.error('PluginLifecycle', 'Strict Lifetime Violation - Trying to restart when not started.');
                    setState('unstartable');
                }
            }
        }
        ;
        function crash() {
            if (edgeState())
                return;
            if (inState('initialized', 'initializing')) {
                setState('unstartable');
            }
            setState('crashed');
        }    // Cannot crash a running or dead Tennu Client.
        function setState(nextState, data) {
            const transition = function (a0, a1) {
                if (a0 === 'initialized') {
                    if (state !== 'initialized') {
                        if (strictMode)
                            crash();
                        return;
                    }
                    state = 'initialized';
                    emitter.emit('initialized');
                    return;
                }
                if (a0 === 'unstartable') {
                    state = 'unstartable';
                    emitter.emit('unstartable');
                    return;
                }
                if (a0 === 'started') {
                    state = 'started';
                    emitter.emit('started');
                    setState('running', false);
                    return;
                }
                if (a0 === 'running') {
                    var restarting = a1;
                    state = 'running';
                    emitter.emit('running', restarting);
                    return;
                }
                if (a0 === 'dying') {
                    var data$2 = a1;
                    const killer = data$2[0];
                    const reason = data$2[1];
                    const deathData = data$2[2];
                    state = 'dying';
                    emitter.emit('dying', killer, reason, deathData);
                    setState(shouldRestart ? 'restarting' : 'dead');
                    return;
                }
                if (a0 === 'restarting') {
                    state = 'restarting';
                    emitter.emit('restarting');
                    restart();
                    return;
                }
                if (a0 === 'dead') {
                    state = 'dead';
                    client._end();
                    emitter.emit('dead');
                    return;
                }
                if (a0 === 'rehashing') {
                    state = 'rehashing';
                    emitter.emit('rehash');
                    if (state !== 'rehashing')
                        return;
                    emitter.emit('rehashed');
                    setState('running', true);
                    return;
                }
                if (a0 === 'crashed') {
                    var previousState = a1;
                    emitter.emit('crash', previousState);
                    return;
                }
                throw new TypeError('No match');
            };
            if (edgeState()) {
                throw new Error(format('Client cannot transition out of %s state.', state));
            }
            client.note(format('Lifecycle Switching to state `%s`.', nextState));
            transition(nextState, data);
        }
        ;
        return {
            hooks: {
                lifecycle: function (plugin, subhooks) {
                    [
                        'initialized',
                        'started',
                        'running',
                        'dying',
                        'dead',
                        'restarting',
                        'rehash',
                        'rehashed'
                    ].forEach(function (state$2) {
                        if (subhooks[state$2]) {
                            emitter.on(state$2, subhooks[state$2]);
                        }
                    });
                }
            },
            exports: {
                setState: setState,
                inState: inState,
                isEdgeState: edgeState,
                restart: function (reason) {
                    shouldRestart = true;
                    die('PluginLifecycle', 'restarting', reason);
                },
                die: die,
                rehash: function () {
                    return;
                }    // TBD in the future.
,
                requestRestart: function () {
                    shouldRestart = true;
                },
                getState: function () {
                    return state;
                }
            }
        };
    }
};
//# sourceMappingURL=../sourcemaps/plugins/lifecycle.js.map