{"version":3,"sources":["/home/havvy/tennu/tennu/src/bin/tennu.sjs"],"names":["program","require","Client","fs","inspect","format","version","usage","option","parse","process","argv","config_path","args","console","log","exit","cwd","config","readFileSync","encoding","e","stack","JSON","verbose","server","port","parts","level","Array","prototype","slice","call","arguments","map","arg","String","Date","join","Logger","debug","info","notice","warn","error","crit","alert","emerg","client","connect","onabort","self","attemptedToQuitAlready","quit","on"],"mappings":"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","file":"tennu.js","sourcesContent":["var program = require('commander');\nvar Client = require('../lib/client.js');\nvar fs = require('fs');\nvar inspect = require('util').inspect;\nvar format = require('util').format;\n\nprogram\n  .version('1.0.0')\n  .usage('[options] <config file>')\n  .option('-v, --verbose', 'Log to standard out')\n  .option('-d, --debug', 'Log debug messages. Requires -v')\n  .parse(process.argv);\n\n\n// Get the configuration.\nvar config_path = program.args[0];\n\nif (!config_path) {\n    console.log(\"No config path given!\");\n    process.exit(1);\n}\n\nconfig_path = process.cwd() + '/' + config_path;\n\ntry {\n    var config = fs.readFileSync(config_path, {encoding: 'utf-8'});\n} catch (e) {\n    console.log(\"Unknown Error detected!\");\n    console.log();\n    console.log(e.stack);\n    process.exit(2);\n}\n\ntry {\n    config = JSON.parse(config)\n} catch (e) {\n    console.log(\"Failed to parse configuration file.\");\n    console.log();\n    console.log(e.stack);\n    process.exit(3);\n}\n\n// Say what you're about to do (if -v)\nif (program.verbose) {\n    console.log(format(\"Connecting to %s:%d\", config.server, config.port));\n}\n\n// Create the dependency management object.\nvar parts = {};\n\nif (program.verbose) {\n    var log = function (level) { \n        return function () {\n            var args = Array.prototype.slice.call(arguments)\n                .map(function (arg) {\n                    if (typeof arg === 'object') {\n                        return inspect(arg);\n                    } else {\n                        return String(arg);\n                    }\n                });\n            console.log(String(Date()), level, args.join(\" \"));\n        };\n    };\n\n    var Logger = function () {\n        return {\n            debug: program.debug ? log('debug') : function () {},\n            info: log('info'),\n            notice: log('notice'),\n            warn: log('warn'),\n            error: log('error'),\n            crit: log('crit'),\n            alert: log('alert'),\n            emerg: log('emerg')\n        };\n    };\n\n    parts.Logger = Logger;\n}\n\n// Try to connect, or print why it couldn't.\ntry {\n    var client = Client(config, parts);\n    client.connect();\n} catch (e) {\n    console.log(\"Error occurred creating and connecting to Tennu instance.\");\n    console.log();\n    console.log(e.stack);\n    process.exit(4);\n}\n\n// Register hangup functions\nvar onabort = function self () {\n    if (!self.attemptedToQuitAlready) {\n        client.quit(\"Bot terminated.\");\n    } else {\n        process.exit(1);\n    }\n};\n\nprocess.on('SIGHUP', onabort);\nprocess.on('SIGINT', onabort);\nprocess.on('SIGQUIT', onabort);\nprocess.on('SIGABRT', onabort);\nprocess.on('SIGTERM', onabort);"],"sourceRoot":"/source/"}