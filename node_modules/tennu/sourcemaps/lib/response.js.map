{"version":3,"sources":["/home/havvy/tennu/tennu/src/lib/response.sjs"],"names":["module","exports","create","handlerResponse","message","intent","undefined","target","Array","isArray","channel","query","nickname","Error","send","response","client","intents","say","a","b","act","notice","none","ctcp","a0","a1","Object","prototype","toString","call","length","ctcpType","TypeError"],"mappings":"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","file":"response.js","sourcesContent":["/**\n *\n * A Response is a struct with three fields:\n *\n * intent: \"say\" | \"act\" | \"notice\" | \"ctcp\" | \"none\"\n * message: String | [SingleWordString, String]\n * target: Target\n *\n * The \"message\" is always a String unless the intent is \"ctcp\".\n *\n * When the intent is \"none\", no message should be sent.\n * When the intent is \"say\" or \"notice\", a \"privmsg\" or \"notice\"\n *      should be sent.\n * When the intent is \"ctcp\", a CTCP should be sent with the type\n *      being the first value and the body being the second.\n * When the intent is \"act\", it is equivalent to a CTCP where the\n *      type is \"ACTION\" and the body is the message.\n *\n *\n * When creating a response from the return value of a handler,\n * what happens depends on the type.\n *\n * undefined:  The intent shall be \"none\", with the other values left\n *             undefined, since they are unused.\n * string | [string]:  The intent shall be \"say\", with the value\n                       used as the message. The target will be the\n                       original channel or query that the handler\n                       is responding to.\n * object: The object must have a message property. If there is no\n *         intent property, the intent is set to \"say\". If there is\n *         a query property, and it is true, then the target is set to\n *         a query of the sender of the message being handled. Otherwise,\n *         it is set to the value of the \"target\" property on the object,\n *         defaulting to the original channel or query the handler is\n *         responding to.\n *\n **/\n\nmodule.exports = {\n    create: function (handlerResponse, message) {\n        if (typeof handlerResponse === \"undefined\") {\n            return {\n                intent: \"none\",\n                message: undefined,\n                target: undefined\n            };\n        } else if (typeof handlerResponse === \"string\" || Array.isArray(handlerResponse)) {\n            return {\n                intent: \"say\",\n                message: handlerResponse,\n                target: message.channel\n            };\n        } else if (typeof handlerResponse === \"object\") {\n            return {\n                message: handlerResponse.message,\n                intent: handlerResponse.intent || \"say\",\n                target: handlerResponse.query ? message.nickname : (handlerResponse.target || message.channel)\n            };\n        } else {\n            throw new Error(\"Bad Response\");\n        }\n    },\n\n    send: function (response, client) {\n        const intents = {\n            say: 位[client.say(#, #)],\n            act: 位[client.act(#, #)],\n            notice: 位[client.notice(#, #)],\n            none: 位[undefined],\n            ctcp: function {\n                (target, [ctcpType, message]) => client.ctcp(target, ctcpType, message)\n            }\n        };\n\n        intents[response.intent](response.target, response.message);\n    }\n}"],"sourceRoot":"/source/"}