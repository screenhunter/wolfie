{"version":3,"sources":["/home/havvy/tennu/tennu/src/lib/message.js"],"names":["RFCMessage","require","mircColors","util","extensions","join","message","channel","params","toLowerCase","part","reason","kick","kicked","kicker","quit","privmsg","isQuery","indexOf","trim","replace","nickname","notice","nick","old","hostmask","new","replyname","username","hostname","realname","server","serverInfo","seconds","since","identifiedas","chanenl","topic","who","timestamp","nicknames","split","words","ip","Message","raw","Object","create","command","parseHostmaskFromPrefix","module","exports"],"mappings":"AAAA,IAAIA,UAAA,GAAaC,OAAA,CAAQ,aAAR,CAAjB;AACA,IAAIC,UAAA,G,uBAAJ,CADA;AAEA,IAAIC,IAAA,GAAOF,OAAA,CAAQ,MAAR,CAAX,CAFA;AAIA,IAAIG,UAAA,GAAa;AAAA,QACbC,IAAA,EAAM,UAAUC,OAAV,EAAmB;AAAA,YACrBA,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,EAAkBC,WAAlB,EAAlB,CADqB;AAAA,SADZ;AAAA,QAKbC,IAAA,EAAM,UAAUJ,OAAV,EAAmB;AAAA,YACrBA,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,EAAkBC,WAAlB,EAAlB,CADqB;AAAA,YAErBH,OAAA,CAAQK,MAAR,GAAiBL,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAjB,CAFqB;AAAA,SALZ;AAAA,QAUbI,IAAA,EAAM,UAAUN,OAAV,EAAmB;AAAA,YACrBA,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,EAAkBC,WAAlB,EAAlB,CADqB;AAAA,YAErBH,OAAA,CAAQO,MAAR,GAAiBP,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAjB,CAFqB;AAAA,YAGrBF,OAAA,CAAQQ,MAAR,GAAiBR,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAjB,CAHqB;AAAA,SAVZ;AAAA,QAgBbO,IAAA,EAAM,UAAUT,OAAV,EAAmB;AAAA,YACrBA,OAAA,CAAQK,MAAR,GAAiBL,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAjB,CADqB;AAAA,SAhBZ;AAAA,QAoBbQ,OAAA,EAAS,UAAUV,OAAV,EAAmB;AAAA,YAExB;AAAA,YAAAA,OAAA,CAAQW,OAAR,GAAmB,QAAQC,OAAR,CAAgBZ,OAAA,CAAQE,MAAR,CAAe,CAAf,EAAkB,CAAlB,CAAhB,MAA0C,CAAC,CAA9D,CAFwB;AAAA,YAGxBF,OAAA,CAAQA,OAAR,GAAkBA,OAAA,CAAQE,MAAR,CAAe,CAAf,EAAkBW,IAAlB,GAAyBC,OAAzB,CAAiClB,UAAjC,EAA6C,EAA7C,CAAlB,CAHwB;AAAA,YAKxB,IAAII,OAAA,CAAQW,OAAZ,EAAqB;AAAA,gBACjBX,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQe,QAA1B,CADiB;AAAA,aAArB,MAEO;AAAA,gBACHf,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAlB,CADG;AAAA,aAPiB;AAAA,SApBf;AAAA,QAgCbc,MAAA,EAAQ,UAAUhB,OAAV,EAAmB;AAAA,YAEvB;AAAA,YAAAA,OAAA,CAAQW,OAAR,GAAmB,QAAQC,OAAR,CAAgBZ,OAAA,CAAQE,MAAR,CAAe,CAAf,EAAkB,CAAlB,CAAhB,MAA0C,CAAC,CAA9D,CAFuB;AAAA,YAGvBF,OAAA,CAAQA,OAAR,GAAkBA,OAAA,CAAQE,MAAR,CAAe,CAAf,EAAkBY,OAAlB,CAA0BlB,UAA1B,EAAsC,EAAtC,EAA0CiB,IAA1C,EAAlB,CAHuB;AAAA,YAKvB,IAAIb,OAAA,CAAQW,OAAZ,EAAqB;AAAA,gBACjBX,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQe,QAA1B,CADiB;AAAA,aAArB,MAEO;AAAA,gBACHf,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAlB,CADG;AAAA,aAPgB;AAAA,SAhCd;AAAA,QA4Cbe,IAAA,EAAM,UAAUjB,OAAV,EAAmB;AAAA,YACrBA,OAAA,CAAQkB,GAAR,GAAclB,OAAA,CAAQmB,QAAR,CAAiBJ,QAA/B,CADqB;AAAA,YAErBf,OAAA,CAAQoB,GAAR,GAAcpB,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAd,CAFqB;AAAA,SA5CZ;AAAA,QAiDb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAGtB;AAAA;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,kBAApB,CAHsB;AAAA,YAItBrB,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAJsB;AAAA,SAjDb;AAAA,QAwDb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,eAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAHsB;AAAA,YAItBF,OAAA,CAAQsB,QAAR,GAAmBtB,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAJsB;AAAA,YAKtBF,OAAA,CAAQuB,QAAR,GAAmBvB,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CALsB;AAAA,YAMtBF,OAAA,CAAQwB,QAAR,GAAmBxB,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CANsB;AAAA,YAOtBF,OAAA,CAAQmB,QAAR,GAAmB;AAAA,gBACfJ,QAAA,EAAUf,OAAA,CAAQE,MAAR,CAAe,CAAf,CADK;AAAA,gBAEfoB,QAAA,EAAUtB,OAAA,CAAQE,MAAR,CAAe,CAAf,CAFK;AAAA,gBAGfqB,QAAA,EAAUvB,OAAA,CAAQE,MAAR,CAAe,CAAf,CAHK;AAAA,aAAnB,CAPsB;AAAA,SAxDb;AAAA,QAsEb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAmB,iBAAnB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAHsB;AAAA,YAItBF,OAAA,CAAQyB,MAAR,GAAiBzB,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAjB,CAJsB;AAAA,YAKtBF,OAAA,CAAQ0B,UAAR,GAAqB1B,OAAA,CAAQE,MAAR,CAAe,CAAf,CAArB,CALsB;AAAA,SAtEb;AAAA,QA8Eb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,eAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAHsB;AAAA,YAItBF,OAAA,CAAQ2B,OAAR,GAAkB3B,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAlB,CAJsB;AAAA,YAKtBF,OAAA,CAAQ4B,KAAR,GAAgB5B,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAhB,CALsB;AAAA,SA9Eb;AAAA,QAsFb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,gBAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAHsB;AAAA,SAtFb;AAAA,QA4Fb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAGtB;AAAA;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,mBAApB,CAHsB;AAAA,YAItBrB,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAJsB;AAAA,SA5Fb;AAAA,QAmGb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAGtB;AAAA;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,mBAApB,CAHsB;AAAA,YAItBrB,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAJsB;AAAA,YAKtBF,OAAA,CAAQ6B,YAAR,GAAuB7B,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAvB,CALsB;AAAA,SAnGb;AAAA,QA2Gb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,WAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQ8B,OAAR,GAAkB9B,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAlB,CAHsB;AAAA,YAItBF,OAAA,CAAQ+B,KAAR,GAAgB/B,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAhB,CAJsB;AAAA,SA3Gb;AAAA,QAkHb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,kBAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAlB,CAHsB;AAAA,YAItBF,OAAA,CAAQgC,GAAR,GAAchC,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAd,CAJsB;AAAA,YAKtBF,OAAA,CAAQiC,SAAR,GAAoBjC,OAAA,CAAQE,MAAR,CAAe,CAAf,CAApB,CALsB;AAAA,SAlHb;AAAA,QA0Hb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,cAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAlB,CAHsB;AAAA,YAItBF,OAAA,CAAQkC,SAAR,GAAoBlC,OAAA,CAAQE,MAAR,CAAe,CAAf,EAAkBW,IAAlB,GAAyBsB,KAAzB,CAA+B,GAA/B,CAApB,CAJsB;AAAA,SA1Hb;AAAA,QAiIb,OAAO,UAAUnC,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,gBAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAlB,CAHsB;AAAA,SAjIb;AAAA,QAuIb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,eAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAHsB;AAAA,YAItB,IAAIkC,KAAA,GAAQpC,OAAA,CAAQE,MAAR,CAAe,CAAf,EAAkBiC,KAAlB,CAAwB,GAAxB,CAAZ,CAJsB;AAAA,YAKtBnC,OAAA,CAAQmB,QAAR,GAAmBiB,KAAA,CAAM,CAAN,CAAnB,CALsB;AAAA,YAMtBpC,OAAA,CAAQqC,EAAR,GAAaD,KAAA,CAAM,CAAN,CAAb,CANsB;AAAA,SAvIb;AAAA,QAgJb,OAAO,UAAUpC,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAmB,gBAAnB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAnB,CAHsB;AAAA,SAhJb;AAAA,QAsJb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,mBAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAlB,CAHsB;AAAA,SAtJb;AAAA,QA4Jb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,qBAApB,CAFsB;AAAA,YAGtBrB,OAAA,CAAQC,OAAR,GAAkBD,OAAA,CAAQE,MAAR,CAAe,CAAf,CAAlB,CAHsB;AAAA,SA5Jb;AAAA,QAkKb,OAAO,UAAUF,OAAV,EAAmB;AAAA,YAEtB;AAAA,YAAAA,OAAA,CAAQqB,SAAR,GAAoB,iBAApB,CAFsB;AAAA,SAlKb;AAAA,KAAjB,CAJA;AA4KA,IAAIiB,OAAA,GAAU,UAAUC,GAAV,EAAe;AAAA,IACzB,IAAIvC,OAAA,GAAUwC,MAAA,CAAOC,MAAP,CAAc,IAAI/C,UAAJ,CAAe6C,GAAf,CAAd,CAAd,CADyB;AAAA,IAGzBvC,OAAA,CAAQ0C,OAAR,GAAkB1C,OAAA,CAAQ0C,OAAR,CAAgBvC,WAAhB,EAAlB,CAHyB;AAAA,IAOzB;AAAA;AAAA,IAAAH,OAAA,CAAQmB,QAAR,GAAmBnB,OAAA,CAAQ2C,uBAAR,EAAnB,CAPyB;AAAA,IAQzB3C,OAAA,CAAQe,QAAR,GAAmBf,OAAA,CAAQmB,QAAR,IAAoBnB,OAAA,CAAQmB,QAAR,CAAiBJ,QAAxD,CARyB;AAAA,IAUzB,IAAIjB,UAAA,CAAWE,OAAA,CAAQ0C,OAAnB,CAAJ,EAAiC;AAAA,QAC7B5C,UAAA,CAAWE,OAAA,CAAQ0C,OAAnB,EAA4B1C,OAA5B,EAD6B;AAAA,KAVR;AAAA,IAczB,OAAOA,OAAP,CAdyB;AAAA,CAA7B,CA5KA;AA6LAsC,OAAA,CAAQxC,UAAR,GAAqBA,UAArB,CA7LA;AA+LA8C,MAAA,CAAOC,OAAP,GAAiBP,OAAjB","file":"message.js","sourcesContent":["var RFCMessage = require('irc-message');\nvar mircColors = /\\u0003\\d?\\d?,?\\d?\\d?/g;\nvar util = require('util');\n\nvar extensions = {\n    join: function (message) {\n        message.channel = message.params[0].toLowerCase();\n    },\n\n    part: function (message) {\n        message.channel = message.params[0].toLowerCase();\n        message.reason = message.params[1];\n    },\n\n    kick: function (message) {\n        message.channel = message.params[0].toLowerCase();\n        message.kicked = message.params[1];\n        message.kicker = message.params[2];\n    },\n\n    quit: function (message) {\n        message.reason = message.params[0];\n    },\n\n    privmsg: function (message) {\n        // Test fails if new channel prefixes are created by IRCds, but that's unlikely.\n        message.isQuery = ('#!+.~'.indexOf(message.params[0][0]) === -1);\n        message.message = message.params[1].trim().replace(mircColors, '');\n\n        if (message.isQuery) {\n            message.channel = message.nickname;\n        } else {\n            message.channel = message.params[0];\n        }\n    },\n\n    notice: function (message) {\n        // Test fails if new channel prefixes are created by IRCds, but that's unlikely.\n        message.isQuery = ('#!+.~'.indexOf(message.params[0][0]) === -1);\n        message.message = message.params[1].replace(mircColors, '').trim();\n\n        if (message.isQuery) {\n            message.channel = message.nickname;\n        } else {\n            message.channel = message.params[0];\n        }\n    },\n\n    nick: function (message) {\n        message.old = message.hostmask.nickname;\n        message.new = message.params[0];\n    },\n\n    '307': function (message) {\n        // :<server> 307 <me> <nick> :is a registered nick\n        // FIXME: Only accounts for Unrealircd\n        message.replyname = 'RPL_WHOISREGNICK';\n        message.nickname = message.params[1];\n    },\n\n    '311': function (message) {\n        // :<server> 311 <me> <nick> <username> <hostmask> * <realname>\n        message.replyname = 'RPL_WHOISUSER';\n        message.nickname = message.params[1];\n        message.username = message.params[2];\n        message.hostname = message.params[3];\n        message.realname = message.params[5];\n        message.hostmask = {\n            nickname: message.params[1],\n            username: message.params[2],\n            hostname: message.params[3]\n        };\n    },\n\n    '312': function (message) {\n        // :<server> 312 <me> <nick> <server> :<info>\n        message.replyname= 'RPL_WHOISSERVER';\n        message.nickname = message.params[1];\n        message.server = message.params[2];\n        message.serverInfo = message.params[3];\n    },\n\n    '317': function (message) {\n        // :<server> 317 <me> <nick> <seconds> <unixtime> :seconds idle, signon time\n        message.replyname = 'RPL_WHOISIDLE';\n        message.nickname = message.params[1];\n        message.seconds = message.params[2];\n        message.since = message.params[3];\n    },\n\n    '318': function (message) {\n        // :<server> 318 <me> <nick> :End of /WHOIS list.\n        message.replyname = 'RPL_ENDOFWHOIS';\n        message.nickname = message.params[1];\n    },\n\n    '319': function (message) {\n        // :<server> 319 <me> <nickname> :<channels>\n        // channel format:  <power sigil>?<channel sigil><name>\n        message.replyname = 'RPL_WHOISCHANNELS';\n        message.nickname = message.params[1];\n    },\n\n    '330': function (message) {\n        // :<server> 330 <me> <nickname> <ident> :is logged in as\n        // Nonstandard, but used on most IRCds.\n        message.replyname = 'RPL_WHOISLOGGEDIN';\n        message.nickname = message.params[1];\n        message.identifiedas = message.params[2];\n    },\n\n    '332': function (message) {\n        // :<server> 332 <me> <channel> :<topic>\n        message.replyname = 'RPL_TOPIC';\n        message.chanenl = message.params[1];\n        message.topic = message.params[2];\n    },\n\n    '333': function (message) {\n        // :<server> 333 <me> <channel> <who> <timestamp>\n        message.replyname = 'RPL_TOPICWHOTIME';\n        message.channel = message.params[1];\n        message.who = message.params[2];\n        message.timestamp = message.params[3];\n    },\n\n    '353': function (message) {\n        // :<server> 353 <me> = <channel> :<nicknames>\n        message.replyname = 'RPL_NAMREPLY';\n        message.channel = message.params[2];\n        message.nicknames = message.params[3].trim().split(\" \");\n    },\n\n    '366': function (message) {\n        // :<server> 366 <me> <channel> :End of /NAMES list.\n        message.replyname = 'RPL_ENDOFNAMES';\n        message.channel = message.params[1];\n    },\n\n    '378': function (message) {\n        // :<server> 378 <me> <nickname> :is connecting from <hostmask> <ip>\n        message.replyname = 'RPL_WHOISHOST';\n        message.nickname = message.params[1];\n        var words = message.params[2].split(' ');\n        message.hostmask = words[3];\n        message.ip = words[4];\n    },\n\n    '401': function (message) {\n        // :<server> 401 <me> <nick> :No such nick/channel\n        message.replyname= 'ERR_NOSUCHNICK';\n        message.nickname = message.params[1];\n    },\n\n    '403': function (message) {\n        // :<server> 403 <me> <channel> :<reason>\n        message.replyname = 'ERR_NOSUCHCHANNEL';\n        message.channel = message.params[1];\n    },\n\n    '405': function (message) {\n        // :<server> 405 <me> <channel> :<reason>\n        message.replyname = 'ERR_TOOMANYCHANNELS';\n        message.channel = message.params[1];\n    },\n\n    '671': function (message) {\n        // :<server> 671 <me> <nickname> :is using a secure connection\n        message.replyname = 'RPL_WHOISSECURE'\n    }\n};\n\nvar Message = function (raw) {\n    var message = Object.create(new RFCMessage(raw));\n\n    message.command = message.command.toLowerCase();\n\n    // message.hostmask is either null or an object with\n    // nickname, username, hostname properties.\n    message.hostmask = message.parseHostmaskFromPrefix();\n    message.nickname = message.hostmask && message.hostmask.nickname;\n\n    if (extensions[message.command]) {\n        extensions[message.command](message);\n    }\n\n    return message;\n};\n\nMessage.extensions = extensions;\n\nmodule.exports = Message;"],"sourceRoot":"/source/"}