{"version":3,"sources":["/home/havvy/tennu/tennu/src/lib/message-handler.js"],"names":["util","require","EventEmitter","Message","MessageParser","MP","client","logger","socket","parser","Object","create","isupport","parse","raw","message","error","emit","command","toLowerCase","replyname","listen","socket$2","on","bind","after","err","res","type","stack","undefined","channel","debug","Array","isArray","say","query","nickname","target","intent","format","badResponseFormat","inspect","toString","value","module","exports"],"mappings":"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","file":"message-handler.js","sourcesContent":["/**\n * This event emitter listens to an IRC Socket and converts all messages to\n * Message objects which it emits under events of the Message.command field.\n *\n * If the listeners return a value, that value is broadcast to the location\n * that the event originated from, should the event originate from a channel\n * or private message.\n *\n * Numeric events are sent by both numeric and reply name.\n *\n * Example events:\n *  join\n *  error (when quitting/forced to quit)\n *  005\n *  rpl_endofwhois\n *\n * All messages can be listened to with the '*' event.\n *\n * The constructor takes three arguments:\n *   1. client - The nominal client of the message.\n *   2. logger - Logger object.\n *   3. socket - <Optional> EventEmitter emitting ('data', RFC1459Message)\n *\n * MessageParser.parse(raw: String): irc-message-extended.Message\n *   Parses the message, \n *   emits the message event, and the '*' event,\n *   and returns the message.\n *\n * MessageParser#listen(socket: Socket): void\n *   Subscribes the message parser to the socket, parsing anything sent\n *   through the 'data' event.\n *\n * MessageParser#toString(): String\n *   Returns '[Object MessageParser]'.\n */\n\nvar util = require('util');\nvar EventEmitter = require('after-events');\nvar Message = require('./message');\n\nvar MessageParser = function MP (client, logger, socket) {\n    var parser = Object.create(EventEmitter());\n    var isupport;\n\n    parser.parse = function (raw) {\n        var message = new Message(raw, isupport);\n\n        if (message === null) {\n            logger.error(\"Raw message given was not a valid IRC message!\", raw);\n            return null;\n        }\n\n        this.emit(message.command.toLowerCase(), message);\n\n        if (message.replyname) {\n            this.emit(message.replyname.toLowerCase(), message);\n        }\n\n        this.emit(\"*\", message);\n\n        return message;\n    };\n\n    parser.listen = function (socket) {\n        socket.on('data', this.parse.bind(this));\n    };\n\n    parser.after(function (err, res, type, message) {\n        // err := Error\n        // res := string U [string] U {message: string, query: boolean?, intent: ('say' | 'act')?, target: target?}\n        // type := string\n        // message := message\n\n        if (err) {\n            logger.error('Message Handler', 'Error thrown in message handler!');\n            logger.error('Message Handler', err.stack);\n            return;\n        }\n\n        // Tests require that the undefined case return immediately.\n        if (res === undefined || message.channel === undefined) {\n            return;\n        }\n\n        logger.debug('Message Handler', 'Response exists.');\n\n        if (Array.isArray(res) || typeof res === 'string') {\n            client.say(message.channel, res);\n            return;\n        }\n\n        if (typeof res === 'object' && res.message) {\n            const channel = res.query ? message.nickname :\n                     /* otherwise */   (res.target || message.channel);\n            const intent = res.intent === 'act' ? 'act' : 'say';\n\n            client[intent](channel, res.message);\n            return;\n        }\n       \n        logger.error('Message Handler', format(badResponseFormat, message.message, inspect(res)));\n    });\n\n    parser.toString = function () {\n        return \"[Object MessageParser]\";\n    };\n\n    parser.isupport = function (value) {\n        isupport = value;\n    };\n\n    if (socket) {\n        parser.listen(socket);\n    }\n\n    return parser;\n};\n\nmodule.exports = MessageParser;"],"sourceRoot":"/source/"}