{"version":3,"sources":["/home/havvy/tennu/tennu/src/lib/command-handler.sjs"],"names":["EventEmitter","require","inspect","format","lodash","badResponseFormat","Command","privmsg","command_text","args","split","commandname","shift","toLowerCase","create","command","startsWith","str","prefix","substring","length","CommandParser","config","client","nickname","logger","trigger","getMaybeCommandString","removeTrigger","string","message","isQuery","indexOf","trim","parser","Object","parse","maybeCommand","notice","emit","after","err","res","type","error","stack","undefined","debug","Array","isArray","say","channel","query","target","intent","module","exports"],"mappings":"AAAA,MAAMA,YAAA,GAAeC,OAAA,CAAQ,cAAR,CAArB;AACA,MAAMC,OAAA,GAAUD,OAAA,CAAQ,MAAR,EAAgBC,OAAhC,CADA;AAEA,MAAMC,MAAA,GAASF,OAAA,CAAQ,MAAR,EAAgBE,MAA/B,CAFA;AAGA,MAAMC,MAAA,GAASH,OAAA,CAAQ,QAAR,CAAf,CAHA;AAKA,MAAMI,iBAAA,GAAoB,wDAA1B,CALA;AAq0Cc,SA9zCLC,OA8zCK,CA9zCIC,OA8zCJ,EA9zCaC,YA8zCb,EA9zC2B;AAAA,IACrC,MAAMC,IAAA,GAAOD,YAAA,CAAaE,KAAb,C,IAAA,CAAb,CADqC;AAAA,IAErC,MAAMC,WAAA,GAAcF,IAAA,CAAKG,KAAL,GAAaC,WAAb,EAApB,CAFqC;AAAA,IAIrC,OAAOT,MAAA,CAAOU,MAAP,CAAcP,OAAd,EAAuB;AAAA,QAC1BE,IAAA,EAAMA,IADoB;AAAA,QAE1BM,OAAA,EAASJ,WAFiB;AAAA,KAAvB,CAAP,CAJqC;AAAA,CAPzC;AAq0Cc,SApzCLK,UAozCK,CApzCMC,GAozCN,EApzCWC,MAozCX,EApzCmB;AAAA,IAC7B,OAAOD,GAAA,CAAIE,SAAJ,CAAc,CAAd,EAAiBD,MAAA,CAAOE,MAAxB,MAAoCF,MAA3C,CAD6B;AAAA,CAjBjC;AAq0Cc;AAAA,SA/yCLG,aA+yCK,CA/yCUC,MA+yCV,EA/yCkBC,MA+yClB,EA/yC0BC,QA+yC1B,EA/yCoCC,MA+yCpC,EA/yC4C;AAAA,IACtD,IAAIC,OAAA,GAAUJ,MAAA,CAAO,iBAAP,KAA6B,GAA3C,CADsD;AAAA,IA+yC5C,SA5yCDK,qBA4yCC,CA5yCsBpB,OA4yCtB,EA5yC+B;AAAA,QA4yC/B,SA3yCGqB,aA2yCH,CA3yCkBC,MA2yClB,EA3yC0B;AAAA,YAC5B,OAAOA,MAAA,CAAOV,SAAP,CAAiBO,OAAA,CAAQN,MAAzB,CAAP,CAD4B;AAAA,SADK;AAAA,QAKrC,IAAIJ,UAAA,CAAWT,OAAA,CAAQuB,OAAnB,EAA4BJ,OAA5B,CAAJ,EAA0C;AAAA,YACtC,OAAOE,aAAA,CAAcrB,OAAA,CAAQuB,OAAtB,CAAP,CADsC;AAAA,SALL;AAAA,QASrC,IAAIvB,OAAA,CAAQwB,OAAZ,EAAqB;AAAA,YACjB,OAAOxB,OAAA,CAAQuB,OAAf,CADiB;AAAA,SATgB;AAAA,QAarC,IAAId,UAAA,CAAWT,OAAA,CAAQuB,OAAR,CAAgBjB,WAAhB,EAAX,EAA0CW,QAAA,GAAWX,WAAX,EAA1C,CAAJ,EAAyE;AAAA,YAGrE;AAAA;AAAA,kBAAMiB,OAAA,GAAUvB,OAAA,CAAQuB,OAAR,CAAgBX,SAAhB,CAA0BZ,OAAA,CAAQuB,OAAR,CAAgBE,OAAhB,CAAwB,GAAxB,IAA+B,CAAzD,EAA4DC,IAA5D,EAAhB,CAHqE;AAAA,YAIrE,OAAOjB,UAAA,CAAWc,OAAX,EAAoBJ,OAApB,IAA+BE,aAAA,CAAcE,OAAd,CAA/B,GAAwDA,OAA/D,CAJqE;AAAA,SAbpC;AAAA,QAoBrC,OAAO,KAAP,CApBqC;AAAA,KAHa;AAAA,IAwBrD,CAxBqD;AAAA,IA0BtD,MAAMI,MAAA,GAASC,MAAA,CAAOrB,MAAP,CAAcd,YAAA,EAAd,CAAf,CA1BsD;AAAA,IA4BtDkC,MAAA,CAAOE,KAAP,GAmxCU,UAnxCe7B,OAmxCf,EAnxCwB;AAAA,QAC9B,MAAM8B,YAAA,GAAeV,qBAAA,CAAsBpB,OAAtB,CAArB,CAD8B;AAAA,QAG9B,IAAI8B,YAAJ,EAAkB;AAAA,YACd,MAAMtB,OAAA,GAAUT,OAAA,CAAQC,OAAR,EAAiB8B,YAAjB,CAAhB,CADc;AAAA,YAEdZ,MAAA,CAAOa,MAAP,CAAc,iBAAd,EAAiC,mBAAjC,EAAsDvB,OAAA,CAAQA,OAA9D,EAFc;AAAA,YAGd,KAAKwB,IAAL,CAAUxB,OAAA,CAAQA,OAAlB,EAA2BA,OAA3B,EAHc;AAAA,YAId,OAAOA,OAAP,CAJc;AAAA,SAHY;AAAA,KAAlC,CA5BsD;AAAA,IAuCtDmB,MAAA,CAAOM,KAAP,CAwwCU,UAxwCaC,GAwwCb,EAxwCkBC,GAwwClB,EAxwCuBC,IAwwCvB,EAxwC6B5B,OAwwC7B,EAxwCsC;AAAA,QAM5C;AAAA;AAAA;AAAA;AAAA,YAAI0B,GAAJ,EAAS;AAAA,YACLhB,MAAA,CAAOmB,KAAP,CAAa,iBAAb,EAAgC,kCAAhC,EADK;AAAA,YAELnB,MAAA,CAAOmB,KAAP,CAAa,iBAAb,EAAgCH,GAAA,CAAII,KAApC,EAFK;AAAA,YAGL,OAHK;AAAA,SANmC;AAAA,QAa5C;AAAA,YAAIH,GAAA,KAAQI,SAAZ,EAAuB;AAAA,YACnB,OADmB;AAAA,SAbqB;AAAA,QAiB5CrB,MAAA,CAAOsB,KAAP,CAAa,iBAAb,EAAgC,kBAAhC,EAjB4C;AAAA,QAmB5C,IAAIC,KAAA,CAAMC,OAAN,CAAcP,GAAd,KAAsB,OAAOA,GAAP,KAAe,QAAzC,EAAmD;AAAA,YAC/CnB,MAAA,CAAO2B,GAAP,CAAWnC,OAAA,CAAQoC,OAAnB,EAA4BT,GAA5B,EAD+C;AAAA,YAE/C,OAF+C;AAAA,SAnBP;AAAA,QAwB5C,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAA,CAAIZ,OAAnC,EAA4C;AAAA,YACxC,MAAMqB,OAAA,GAAUT,GAAA,CAAIU,KAAJ,GAAYrC,OAAA,CAAQS,QAApB,GACYkB,GAAA,CAAIW,MAAJ,IAActC,OAAA,CAAQoC,OADlD,CADwC;AAAA,YAGxC,MAAMG,MAAA,GAASZ,GAAA,CAAIY,MAAJ,KAAe,KAAf,GAAuB,KAAvB,GAA+B,KAA9C,CAHwC;AAAA,YAKxC/B,MAAA,CAAO+B,MAAP,EAAeH,OAAf,EAAwBT,GAAA,CAAIZ,OAA5B,EALwC;AAAA,YAMxC,OANwC;AAAA,SAxBA;AAAA,QAiC5CL,MAAA,CAAOmB,KAAP,CAAa,iBAAb,EAAgCzC,MAAA,CAAOE,iBAAP,EAA0BU,OAAA,CAAQA,OAAlC,EAA2Cb,OAAA,CAAQwC,GAAR,CAA3C,CAAhC,EAjC4C;AAAA,KAAhD,EAvCsD;AAAA,IA2EtD,OAAOR,MAAP,CA3EsD;AAAA,CAtB1D;AAkGC,CAlGD;AAoGAqB,MAAA,CAAOC,OAAP,GAAiBnC,aAAjB","file":"command-handler.js","sourcesContent":["const EventEmitter = require('after-events');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nconst lodash = require('lodash');\n\nconst badResponseFormat = 'Command handler for %s returned with invalid value: %s';\n\nfunction Command (privmsg, command_text) {\n    const args = command_text.split(/ +/);\n    const commandname = args.shift().toLowerCase();\n\n    return lodash.create(privmsg, {\n        args: args,\n        command: commandname\n    });\n}\n\nfunction startsWith(str, prefix) {\n    return str.substring(0, prefix.length) === prefix;\n}\n\n// nickname is a function that returns the nickname of the client.\nfunction CommandParser (config, client, nickname, logger) {\n    var trigger = config['command-trigger'] || '!';\n\n    function getMaybeCommandString (privmsg) {\n        function removeTrigger (string) {\n            return string.substring(trigger.length);\n        }\n\n        if (startsWith(privmsg.message, trigger)) {\n            return removeTrigger(privmsg.message);\n        }\n\n        if (privmsg.isQuery) {\n            return privmsg.message;\n        }\n\n        if (startsWith(privmsg.message.toLowerCase(), nickname().toLowerCase())) {\n            // Trimming in case of multiple spaces. e.g. (raw message)\n            // nick!user@host PRIVMSG #chan botname:   do something\n            const message = privmsg.message.substring(privmsg.message.indexOf(' ') + 1).trim();\n            return startsWith(message, trigger) ? removeTrigger(message) : message;\n        }\n\n        return false;\n    };\n\n    const parser = Object.create(EventEmitter());\n\n    parser.parse = function (privmsg) {\n        const maybeCommand = getMaybeCommandString(privmsg);\n\n        if (maybeCommand) {\n            const command = Command(privmsg, maybeCommand);\n            logger.notice('Command Handler', 'Emitting command:', command.command);\n            this.emit(command.command, command);\n            return command;\n        }\n    };\n\n    parser.after(function (err, res, type, command) {\n        // err := Error\n        // res := string U [string] U {message: string, query: boolean?, intent: ('say' | 'act')?, target: target?}\n        // type := string\n        // commmand := commmand\n\n        if (err) {\n            logger.error('Command Handler', 'Error thrown in command handler!');\n            logger.error('Command Handler', err.stack);\n            return;\n        }\n\n        // Tests require that the undefined case return immediately.\n        if (res === undefined) {\n            return;\n        }\n\n        logger.debug('Command Handler', 'Response exists.');\n\n        if (Array.isArray(res) || typeof res === 'string') {\n            client.say(command.channel, res);\n            return;\n        } \n\n        if (typeof res === 'object' && res.message) {\n            const channel = res.query ? command.nickname :\n                     /* otherwise */   (res.target || command.channel);\n            const intent = res.intent === 'act' ? 'act' : 'say';\n\n            client[intent](channel, res.message);\n            return;\n        }\n       \n        logger.error('Command Handler', format(badResponseFormat, command.command, inspect(res)));\n    });\n\n    return parser;\n};\n\nmodule.exports = CommandParser;"],"sourceRoot":"/source/"}