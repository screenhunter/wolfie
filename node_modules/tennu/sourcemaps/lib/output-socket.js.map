{"version":3,"sources":["/home/havvy/tennu/tennu/src/lib/output-socket.js"],"names":["inspect","require","format","Q","partition","array","length","partitions","i","len","push","slice","OutputSocket","socket","messageHandler","nickname","logger","raw","line","Array","isArray","join","info","String","rawf","apply","arguments","say","recur","location","message","forEach","msg","call","ctcp","type","act","channel","deferred","defer","unsubscribe","debug","off","onJoin","resolve","on","undefined","promise","part","reason","nick","newNick","quit","notice","mode","target","plus","minus","inArgs","args","util","userhost","users","map","hosts","Error","whois","server","users$2","toString","module","exports"],"mappings":"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","file":"output-socket.js","sourcesContent":["/**\n * The OutputSocket is a facade for the IrcSocket's `raw` method.\n *\n * This could really be in tennu_modules, except that it is integrated\n * into the client. It will be soon enough. First though, upgrade the modules.\n * \n * It supports the following methods:\n *\n * Public Methods\n *   say\n *   act\n *   join\n *   part\n *   quit\n *   nick\n *   mode\n *   userhost\n *   whois\n *   raw\n *   rawf\n */\n\nvar inspect = require('util').inspect;\nvar format = require('util').format;\nvar Q = require('q');\n\nvar partition = function (array, length) {\n    var partitions = [];\n    for (var i = 0, len = array.length; i < len; i += length) {\n        partitions.push(array.slice(i, i + length));\n    }\n    return partitions;\n};\n\nvar OutputSocket = function (socket, messageHandler, nickname, logger) {\n    var raw = function (line) {\n        if (Array.isArray(line)) { line = line.join(\" \"); }\n        logger.info(\"->: \" + String(line));\n        socket.raw(line);\n    };\n\n    var rawf = function () {\n        raw(format.apply(null, arguments));\n    };\n\n    return {\n        say : function recur (location, message) {\n            if (Array.isArray(message)) {\n                message.forEach(function (msg) {\n                    recur.call(this, location, msg);\n                });\n\n                return;\n            }\n            rawf(\"PRIVMSG %s :%s\", location, message);\n        },\n\n        ctcp : function recur (location, type, message) {\n            if (Array.isArray(message)) {\n                message.forEach(function (msg) {\n                    recur.call(this, location, type, msg);\n                });\n\n                return;\n            }\n            this.say(location, format('\\u0001%s %s\\u0001', type, message));\n        },\n\n        act: function (location, message) {\n            this.ctcp(location, \"ACTION\", message);\n        },\n\n        join : function (channel) {\n            var deferred = Q.defer();\n\n            var unsubscribe = function () {\n                logger.debug(\"Join response or timeout occured.\");\n                messageHandler.off('join', onJoin);\n            };\n\n            var onJoin = function (join) {\n                if (join.nickname !== nickname() || join.channel !== channel) {\n                    return;\n                }\n\n                unsubscribe();\n                logger.debug(\"Resolving with join message.\");\n                deferred.resolve(join);\n            };\n\n            messageHandler.on('join', onJoin);\n\n            rawf(\"JOIN :%s\", channel);\n\n            return undefined; // WIP Code.\n            return deferred.promise;\n        },\n\n        part : function (channel, reason) {\n            raw(\"PART \" + channel + (reason ? \" :\" + reason : \"\"));\n        },\n\n        nick : function (newNick) {\n            rawf(\"NICK %s\", newNick);\n        },\n\n        quit : function (reason) {\n            logger.notice(format(\"Quitting with reason: %s\", reason));\n            raw(\"QUIT\" + (reason ? \" :\" + reason : \"\"));\n        },\n\n        mode : function (target, plus, minus, inArgs) {\n            var args = \":\";\n\n            if (plus) {\n                args += \"+\" + plus;\n            }\n\n            if (minus) {\n                args += \"-\" + minus;\n            }\n\n            if (inArgs) {\n                args += \" \" + util.isArray(inArgs) ? inArgs.join(' ') : inArgs;\n            }\n\n            raw([\"MODE\", target, args]);\n        },\n\n        userhost : function recur (users) {\n            if (typeof users === 'string') {\n                rawf(\"USERHOST :%s\", users);\n            } else if (typeof users === 'array') {\n                partition(users, 5)\n                .map(function (hosts) { return hosts.join(' '); })\n                .map(recur);\n            } else {\n                throw new Error(\"Userhost command takes either a string (a single nick) or an array (of string nicks)\");\n            }\n        },\n\n        whois : function recur (users, server) {\n            if (typeof users === \"array\") {\n                if (users.length > 15) {\n                    partition(users, 15)\n                    .map(function (users) { return users.join(','); })\n                    .map(function (users) { recur(users, server); });\n                }\n            } else if (typeof users === 'string') {\n                raw(\"WHOIS \" + (server ? server + \" \" : \"\") + users);\n            } else {\n                throw new Error(\"Whois command takes either a string (a single nick) or an array (of string nicks)\");\n            }\n        },\n\n        raw : raw,\n        rawf : rawf,\n        toString : function () { return \"[Object IrcOutputSocket]\"; }\n    };\n};\n\nmodule.exports = OutputSocket;"],"sourceRoot":"/source/"}