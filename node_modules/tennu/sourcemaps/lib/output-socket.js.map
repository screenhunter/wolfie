{"version":3,"sources":["/home/havvy/tennu/tennu/src/lib/output-socket.sjs"],"names":["inspect","require","format","Promise","partition","array","length","partitions","i","len","push","slice","OutputSocket","socket","messageHandler","nickname","logger","raw","line","Array","isArray","join","info","String","rawf","apply","arguments","say","recur","target","message","forEach","msg","call","ctcp","type","act","notice","channel","resolve","reject","unsubscribe","debug","off","onJoin","on","part","reason","nick","newNick","quit","mode","plus","minus","inArgs","args","util","userhost","users","map","hosts","Error","whois","server","users$2","who","toString","module","exports"],"mappings":"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","file":"output-socket.js","sourcesContent":["/**\n * The OutputSocket is a facade for the IrcSocket's `raw` method.\n *\n * This could really be in tennu_modules, except that it is integrated\n * into the client. It will be soon enough. First though, upgrade the modules.\n * \n * It supports the following methods:\n *\n * Public Methods\n *   say\n *   act\n *   join\n *   part\n *   quit\n *   nick\n *   mode\n *   userhost\n *   whois\n *   raw\n *   rawf\n */\n\nvar inspect = require('util').inspect;\nvar format = require('util').format;\nvar Promise = require('bluebird');\n\nvar partition = function (array, length) {\n    var partitions = [];\n    for (var i = 0, len = array.length; i < len; i += length) {\n        partitions.push(array.slice(i, i + length));\n    }\n    return partitions;\n};\n\nvar OutputSocket = function (socket, messageHandler, nickname, logger) {\n    var raw = function (line) {\n        if (Array.isArray(line)) { line = line.join(\" \"); }\n        logger.info(\"->: \" + String(line));\n        socket.raw(line);\n    };\n\n    var rawf = function () {\n        raw(format.apply(null, arguments));\n    };\n\n    return {\n        say: function recur (target, message) {\n            if (Array.isArray(message)) {\n                message.forEach(function (msg) {\n                    recur.call(this, target, msg);\n                });\n\n                return;\n            }\n            rawf(\"PRIVMSG %s :%s\", target, message);\n        },\n\n        ctcp: function recur (target, type, message) {\n            if (Array.isArray(message)) {\n                message.forEach(function (msg) {\n                    recur.call(this, target, type, msg);\n                });\n\n                return;\n            }\n            this.say(target, format('\\u0001%s %s\\u0001', type, message));\n        },\n\n        act: function (target, message) {\n            this.ctcp(target, \"ACTION\", message);\n        },\n\n        notice: function (target, message) {\n            rawf(\"NOTICE %s :%s\", target, message);\n        },\n\n        join: function (channel) {\n            return new Promise(function (resolve, reject) {\n                var unsubscribe = function () {\n                    logger.debug(\"Join response or timeout occured.\");\n                    messageHandler.off('join', onJoin);\n                };\n\n                var onJoin = function (join) {\n                    if (join.nickname !== nickname() || join.channel !== channel) {\n                        return;\n                    }\n\n                    unsubscribe();\n                    logger.debug(\"Resolving with join message.\");\n                    resolve(join);\n                };\n\n                messageHandler.on('join', onJoin);\n\n                rawf(\"JOIN :%s\", channel);\n            });\n        },\n\n        part: function (channel, reason) {\n            raw(\"PART \" + channel + (reason ? \" :\" + reason: \"\"));\n        },\n\n        nick: function (newNick) {\n            rawf(\"NICK %s\", newNick);\n        },\n\n        quit: function (reason) {\n            logger.notice(format(\"Quitting with reason: %s\", reason));\n            raw(\"QUIT\" + (reason ? \" :\" + reason : \"\"));\n        },\n\n        mode: function (target, plus, minus, inArgs) {\n            var args = \" :\";\n\n            if (plus) {\n                args += \"+\" + plus;\n            }\n\n            if (minus) {\n                args += \"-\" + minus;\n            }\n\n            if (inArgs) {\n                args += \" \" + util.isArray(inArgs) ? inArgs.join(' ') : inArgs;\n            }\n\n            raw([\"MODE\", target, args]);\n        },\n\n        userhost: function recur (users) {\n            if (typeof users === 'string') {\n                rawf(\"USERHOST:%s\", users);\n            } else if (typeof users === 'array') {\n                partition(users, 5)\n                .map(function (hosts) { return hosts.join(' '); })\n                .map(recur);\n            } else {\n                throw new Error(\"Userhost command takes either a string (a single nick) or an array (of string nicks)\");\n            }\n        },\n\n        whois: function recur (users, server) {\n            if (typeof users === \"array\") {\n                if (users.length > 15) {\n                    partition(users, 15)\n                    .map(function (users) { return users.join(','); })\n                    .map(function (users) { recur(users, server); });\n                }\n            } else if (typeof users === 'string') {\n                raw(\"WHOIS \" + (server ? server + \" \" : \"\") + users);\n            } else {\n                throw new Error(\"Whois command takes either a string (a single nick) or an array (of string nicks)\");\n            }\n        },\n\n        who: function (channel) {\n            raw([\"WHO\", channel]);\n        },\n\n        raw: raw,\n        rawf: rawf,\n        toString: function () { return \"[Object IrcOutputSocket]\"; }\n    };\n};\n\nmodule.exports = OutputSocket;"],"sourceRoot":"/source/"}