{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/client.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","logger","info","notice","warn","error","Client","NetSocket","network","fakeWrite","fakeWrite$2","message","spy","apply","arguments","substring","length","connected","emit","join","e","stack","boxfn","value","describe","netsocket","tennu","beforeEach","write","Logger","afterEach","it","connect","disconnect","done","on","nickname","nick","calledWith"],"mappings":"AAAA,MAAMA,KAAA,GAAQC,OAAA,CAAQ,OAAR,CAAd;AACA,MAAMC,MAAA,GAASD,OAAA,CAAQ,eAAR,CAAf,CADA;AAEA,MAAME,KAAA,GAAQF,OAAA,CAAQ,UAAR,CAAd,CAFA;AAGA,MAAMG,OAAA,GAAUH,OAAA,CAAQ,MAAR,EAAgBG,OAAhC,CAHA;AAIA,MAAMC,MAAA,GAASJ,OAAA,CAAQ,MAAR,EAAgBI,MAA/B,CAJA;AAKAJ,OAAA,CAAQ,oBAAR,EAA8BK,OAA9B,GALA;AAOA,MAAMC,KAAA,GAAQ,KAAd,CAPA;AAQA,MAAMC,KAAA,GAAQD,KAAA,GAAQE,OAAA,CAAQC,GAAR,CAAYC,IAAZ,CAAiBF,OAAjB,CAAR,GAAoC,YAAY;AAAA,KAA9D,CARA;AASA,MAAMG,MAAA,GAAS;AAAA,QAACL,KAAA,EAAOC,KAAR;AAAA,QAAeK,IAAA,EAAML,KAArB;AAAA,QAA4BM,MAAA,EAAQN,KAApC;AAAA,QAA2CO,IAAA,EAAMP,KAAjD;AAAA,QAAwDQ,KAAA,EAAOR,KAA/D;AAAA,KAAf,CATA;AAWA,MAAMS,MAAA,GAAShB,OAAA,CAAQ,kBAAR,CAAf,CAXA;AAYA,MAAMiB,SAAA,GAAYjB,OAAA,CAAQ,oCAAR,CAAlB,CAZA;AAcA,MAAMkB,OAAA,GAAU;AAAA,QACZ,YAAY,SADA;AAAA,QAEZ,YAAY,UAFA;AAAA,QAGZ,UAAU,cAHE;AAAA,QAIZ,YAAa,UAJD;AAAA,QAKZ,iBAAkB,UALN;AAAA,QAMZ,YAAa,CAAC,OAAD,CAND;AAAA,KAAhB,CAdA;AAuBA,MAAMC,SAAA,GAAY,SAASC,WAAT,CAAoBC,OAApB,EAA6B;AAAA,IAC3CD,WAAA,CAAUE,GAAV,CAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,EAD2C;AAAA,IAG3CH,OAAA,GAAUA,OAAA,CAAQI,SAAR,CAAkB,CAAlB,EAAqBJ,OAAA,CAAQK,MAAR,GAAiB,CAAtC,CAAV,CAH2C;AAAA,IAK3C;AAAA,QAAI;AAAA,QACA,IAAI,CAAC,KAAKC,SAAV;AAAA,YAAqB,OADrB;AAAA,QAGA,QAAQN,OAAR;AAAA,QACI,KAAK,aAAL;AAAA,YACA,KAAKO,IAAL,CAAU,MAAV,EAAkB;AAAA,gBACd,yCADc;AAAA,gBAEd,kDAFc;AAAA,gBAGd,+DAHc;AAAA,cAGmDC,IAHnD,CAGwD,MAHxD,CAAlB,EADA;AAAA,YAKA,MANJ;AAAA,QAOI,KAAK,MAAL;AAAA,YACA,KAAKD,IAAL,CAAU,MAAV,EAAkB,6DAAlB,EADA;AAAA,YAEA,MATJ;AAAA,QAUI,KAAK,cAAL;AAAA,YACA,KAAKA,IAAL,CAAU,MAAV,EAAkB,+CAAlB,EADA;AAAA,YAEA,MAZJ;AAAA,QAaI,KAAK,YAAL;AAAA,YACA,KAAKA,IAAL,CAAU,MAAV,EAAkB,4CAAlB,EADA;AAAA,YAEA,MAfJ;AAAA,QAgBI,KAAK,qCAAL;AAAA,YACA,KAAKA,IAAL,CAAU,MAAV,EAAkB,6FAAlB,EADA;AAAA,YAEA,MAlBJ;AAAA,QAmBI;AAAA,YACA,KAAK,CAAL,CApBJ;AAAA,SAHA;AAAA,KAAJ,CAyBE,OAAOE,CAAP,EAAU;AAAA,QACRtB,OAAA,CAAQC,GAAR,CAAY,OAAZ,EADQ;AAAA,QAERD,OAAA,CAAQC,GAAR,CAAYqB,CAAA,CAAEC,KAAd,EAFQ;AAAA,KA9B+B;AAAA,CAA/C,CAvBA;AA2DA,MAAMC,KAAA,GAAQ,UAAUC,KAAV,EAAiB;AAAA,IAC3B,OAAO,YAAY;AAAA,QAAE,OAAOA,KAAP,CAAF;AAAA,KAAnB,CAD2B;AAAA,CAA/B,CA3DA;AAGQC,QAAA,CA4DC,cA5DD,EAAgB,YAAY;AAAA,IA6DhC,IAAIC,SAAJ,EAAeC,KAAf,CA7DgC;AAAA,IAkE5BC,UAAA,CAAW,YAAY;AAAA,QAFvB9B,KAAA,GAEuB;AAAA,QAAvBY,SAAA,CAAUG,GAAV,GAAgBvB,KAAA,CAAMuB,GAAN,EAAhB,CAAuB;AAAA,QAEvBa,SAAA,GAAY,IAAIlB,SAAJ,CAAcN,MAAd,CAAZ,CAFuB;AAAA,QAGvBwB,SAAA,CAAUG,KAAV,GAAkBnB,SAAlB,CAHuB;AAAA,QAKvBiB,KAAA,GAAQpB,MAAA,CAAOE,OAAP,EAAgB;AAAA,YACpBD,SAAA,EAAWe,KAAA,CAAMG,SAAN,CADS;AAAA,YAEpBI,MAAA,EAAQP,KAAA,CAAMrB,MAAN,CAFY;AAAA,SAAhB,CAAR,CALuB;AAAA,KAAvB,EAlE4B;AAAA,IAgF5B6B,SAAA,CAAU,YAAY;AAAA,QAFtBjC,KAAA,CAAM,cAAN,EAEsB;AAAA,KAAtB,EAhF4B;AAAA,IAuB5BkC,EAAA,CA0DD,oCA1DC,EAAU,YAAY;AAAA,QA2DtBxC,MAAA,CAAOmC,KAAA,CAAMT,SAAN,KAAoB,KAA3B,EA3DsB;AAAA,QA4DtBS,KAAA,CAAMM,OAAN,GA5DsB;AAAA,QA6DtBzC,MAAA,CAAOmC,KAAA,CAAMT,SAAN,KAAoB,IAA3B,EA7DsB;AAAA,QA8DtBS,KAAA,CAAMO,UAAN,GA9DsB;AAAA,QA+DtB1C,MAAA,CAAOmC,KAAA,CAAMT,SAAN,KAAoB,KAA3B,EA/DsB;AAAA,KAAtB,EAvB4B;AAAA,IAA5B;AAAA,IAAAO,QAAA,CA0FK,mBA1FL,EAAgB,YAAY;AAAA,QAwE5BG,UAAA,CAAW,UAmBCO,IAnBD,EAAiB;AAAA,YAoBxBT,SAAA,CAAUU,EAAV,CAAa,SAAb,EAAwBD,IAAxB,EApBwB;AAAA,YAqBxBR,KAAA,CAAMM,OAAN,GArBwB;AAAA,SAA5B,EAxE4B;AAAA,QAsF5BF,SAAA,CAAU,UAUCI,IAVD,EAAiB;AAAA,YAWvBT,SAAA,CAAUU,EAAV,CAAa,OAAb,EAAsBD,IAAtB,EAXuB;AAAA,YAYvBR,KAAA,CAAMO,UAAN,GAZuB;AAAA,SAA3B,EAtF4B;AAAA,QAuB5BF,EAAA,CA8EG,6BA9EH,EAAU,YAAY;AAAA,YA+ElBxC,MAAA,CAAOmC,KAAA,CAAMU,QAAN,OAAqB,SAA5B,EA/EkB;AAAA,SAAtB,EAvB4B;AAAA,QAA5BZ,QAAA,CAyGS,eAzGT,EAAgB,YAAY;AAAA,YAwE5BG,UAAA,CAAW,UAkCKO,IAlCL,EAAiB;AAAA,gBAmCpBR,KAAA,CAAMS,EAAN,CAAS,MAAT,EAAiB,YAAY;AAAA,oBAAED,IAAA,GAAF;AAAA,iBAA7B,EAnCoB;AAAA,gBAoCpBR,KAAA,CAAMW,IAAN,CAAW,SAAX,EApCoB;AAAA,aAA5B,EAxE4B;AAAA,YAuB5BN,EAAA,CAwFO,yBAxFP,EAAU,YAAY;AAAA,gBAyFdxC,MAAA,CAAOmC,KAAA,CAAMU,QAAN,OAAqB,SAA5B,EAzFc;AAAA,aAAtB,EAvB4B;AAAA,SAA5B,EAA4B;AAAA,KAA5B,EAA4B;AAAA,IAA5BZ,QAAA,CAqHK,UArHL,EAAgB,YAAY;AAAA,QAwE5BG,UAAA,CAAW,UA8CCO,IA9CD,EAAiB;AAAA,YA+CxBR,KAAA,CAAMS,EAAN,CAAS,MAAT,EAAiB,YAAY;AAAA,gBAAED,IAAA,GAAF;AAAA,aAA7B,EA/CwB;AAAA,YAgDxBR,KAAA,CAAMM,OAAN,GAhDwB;AAAA,SAA5B,EAxE4B;AAAA,QAsF5BF,SAAA,CAAU,UAqCCI,IArCD,EAAiB;AAAA,YAsCvBT,SAAA,CAAUU,EAAV,CAAa,OAAb,EAAsBD,IAAtB,EAtCuB;AAAA,YAuCvBR,KAAA,CAAMO,UAAN,GAvCuB;AAAA,SAA3B,EAtF4B;AAAA,QAuB5BF,EAAA,CAyGG,yCAzGH,EAAU,YAAY;AAAA,YA0GlBxC,MAAA,CAAOkB,SAAA,CAAUG,GAAV,CAAc0B,UAAd,CAAyB,iBAAzB,EAA4C,OAA5C,CAAP,EA1GkB;AAAA,SAAtB,EAvB4B;AAAA,KAA5B,EAA4B;AAAA,IAA5Bd,QAAA,CAqIK,cArIL,EAAgB,YAAY;AAAA,QAwE5BG,UAAA,CAAW,UA8DCO,IA9DD,EAAiB;AAAA,YA+DxBR,KAAA,CAAMS,EAAN,CAAS,QAAT,EAAmB,UAAUxB,OAAV,EAAmB;AAAA,gBAClC,IAAIA,OAAA,CAAQyB,QAAR,KAAqB,UAAzB,EAAqC;AAAA,oBACjCF,IAAA,GADiC;AAAA,iBADH;AAAA,aAAtC,EA/DwB;AAAA,YAqExBR,KAAA,CAAMM,OAAN,GArEwB;AAAA,SAA5B,EAxE4B;AAAA,QAsF5BF,SAAA,CAAU,UA0DCI,IA1DD,EAAiB;AAAA,YA2DvBT,SAAA,CAAUU,EAAV,CAAa,OAAb,EAAsBD,IAAtB,EA3DuB;AAAA,YA4DvBR,KAAA,CAAMO,UAAN,GA5DuB;AAAA,SAA3B,EAtF4B;AAAA,QAuB5BF,EAAA,CA8HG,uCA9HH,EAAU,YAAY;AAAA,YA+HlBxC,MAAA,CAAOkB,SAAA,CAAUG,GAAV,CAAc0B,UAAd,CAAyB,yCAAzB,EAAoE,OAApE,CAAP,EA/HkB;AAAA,SAAtB,EAvB4B;AAAA,KAA5B,EAA4B;AAAA,CAA5B","file":"client.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst Client = require('../lib/client.js');\nconst NetSocket = require('../test-helpers/mock-net-socket.js');\n\nconst network = {\n    'nickname': 'testbot',\n    'username': 'testuser',\n    'server': 'irc.test.net',\n    'nickserv' : 'nickserv',\n    'auth-password' : 'testpass',\n    'channels' : ['#test'],\n};\n\nconst fakeWrite = function fakeWrite (message) {\n    fakeWrite.spy.apply(this, arguments);\n\n    message = message.substring(0, message.length - 2);\n    // console.log('Fakewrite called with message `' + message + '`');\n    try {\n        if (!this.connected) return;\n\n        switch (message) {\n            case 'JOIN :#test':\n            this.emit('data', [\n                ':testbot!testuser@localhost JOIN :#test',\n                ':irc.localhost.net 353 testbot = #test :@testbot',\n                ':irc.localhost.net 366 testbot #test :End of /NAMES list.\\r\\n'].join('\\r\\n'));\n            break;\n            case 'QUIT':\n            this.emit('data', 'ERROR :Closing Link: testbot[localhost] (Quit: testbot)\\r\\n');\n            break;\n            case 'NICK newNick':\n            this.emit('data', ':testbot!testuser@localhost NICK :newNick\\r\\n');\n            break;\n            case 'PART #test':\n            this.emit('data', ':testbot!testuser@localhost PART #test\\r\\n');\n            break;\n            case 'PRIVMSG nickserv :identify testpass':\n            this.emit('data', ':nickserv!services@test.net NOTICE testbot :Password accepted - you are now recognized.\\r\\n');\n            break;\n            default:\n            void 0;\n        }\n    } catch (e) {\n        console.log('ERROR');\n        console.log(e.stack);\n    }\n};\n\nconst boxfn = function (value) {\n    return function () { return value; };\n};\n\ndescribe 'Tennu Client' {\n    var netsocket, tennu;\n\n    beforeEach {\n        logfn(/* newline */);\n\n        fakeWrite.spy = sinon.spy();\n\n        netsocket = new NetSocket(logger);\n        netsocket.write = fakeWrite;\n\n        tennu = Client(network, {\n            NetSocket: boxfn(netsocket),\n            Logger: boxfn(logger)\n        });\n    }\n\n    afterEach {\n        logfn('End of test.');\n    }\n\n    it 'Basic Connecting and Disconnecting' {\n        assert(tennu.connected === false);\n        tennu.connect();\n        assert(tennu.connected === true);\n        tennu.disconnect();\n        assert(tennu.connected === false);\n    }\n\n    // Move this to its own file.\n    describe 'Nickname Tracking' {\n        beforeEach (done) {\n            netsocket.on('connect', done);\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'tracks its initial nickname' {\n            assert(tennu.nickname() === 'testbot');\n        }\n\n        describe 'changing nick' {\n            beforeEach (done) {\n                tennu.on('nick', function () { done() });\n                tennu.nick('newNick');\n            }\n\n            it 'tracks its changed nick' {\n                assert(tennu.nickname() === 'newNick');\n            }\n        }\n    }\n\n    describe 'autojoin' {\n        beforeEach (done) {\n            tennu.on('join', function () { done() });\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'automatically joins specified channels.' {\n            assert(fakeWrite.spy.calledWith('JOIN :#test\\r\\n', 'utf-8'));\n        }\n    }\n\n    describe 'autoidentify' {\n        beforeEach (done) {\n            tennu.on('notice', function (message) {\n                if (message.nickname === 'nickserv') {\n                    done();\n                }\n            });\n\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'automatically identifies to services.' {\n            assert(fakeWrite.spy.calledWith('PRIVMSG nickserv :identify testpass\\r\\n', 'utf-8'));\n        }\n    }\n}"],"sourceRoot":"/source/"}