{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/response.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","Response","message","channel","nickname","describe","it","create","undefined","intent","target","query","client","beforeEach","notice","spy","say","act","ctcp","send","called","calledOnce","calledWithExactly"],"mappings":"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","file":"response.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\n\nconst Response = require('../lib/response');\n\nconst message = {\n    channel: \"#channel\",\n    nickname: \"sender\"\n};\n\ndescribe \"Response\" {\n    describe \"Creation\" {\n        it \"gives no response to an `undefined` value\" {\n            assert(equal(Response.create(undefined, message), {\n                intent: \"none\",\n                message: undefined,\n                target: undefined\n            }));\n        }\n\n        it \"makes the intent 'say' for a String\" {\n            assert(equal(Response.create(\"Hello World!\", message), {\n                intent: \"say\",\n                message: \"Hello World!\",\n                target: \"#channel\"\n            }));\n        }\n\n        it \"makes the intent 'say' for an Array\" {\n            assert(equal(Response.create([\"Hello\", \"World\"], message), {\n                intent: \"say\",\n                message: [\"Hello\", \"World\"],\n                target: \"#channel\"\n            }));\n        }\n\n        describe \"given an Object\" {\n            it \"copies all the properties from an object with the same shape as a Response\" {\n                assert(equal(Response.create({\n                    intent: \"say\",\n                    message: \"Goodbye World!\",\n                    target: \"#channel\"\n                }, message), {\n                    intent: \"say\",\n                    message: \"Goodbye World!\",\n                    target: \"#channel\"\n                }));\n            }\n\n            it \"copies all properties from an object with the same shape as a Response but changes target if 'query' is true\" {\n                assert(equal(Response.create({\n                    intent: \"say\",\n                    message: \"Hello User!\",\n                    target: \"#channel\",\n                    query: true\n                }, message), {\n                    intent: \"say\",\n                    message: \"Hello User!\",\n                    target: \"sender\"\n                }));\n            }\n\n            it \"missing a target with no or false query\" {\n                assert(equal(Response.create({\n                    intent: \"say\",\n                    message: \"Hello Who?\",\n                }, message), {\n                    intent: \"say\",\n                    message: \"Hello Who?\",\n                    target: \"#channel\"\n                }));\n            }\n\n            it \"missing an intent\" {\n                assert(equal(Response.create({\n                    message: \"Hello!\",\n                    target: \"#channel\"\n                }, message), {\n                    intent: \"say\",\n                    message: \"Hello!\",\n                    target: \"#channel\"\n                }));\n            }\n\n            it \"non-say intent\" {\n                assert(equal(Response.create({\n                    intent: \"act\",\n                    message: \"does something.\",\n                    target: \"#channel\"\n                }, message), {\n                    intent: \"act\",\n                    message: \"does something.\",\n                    target: \"#channel\"\n                }))\n            }\n        }\n    }\n\n    describe \"Sending\" {\n        var client;\n\n        beforeEach {\n            client = {\n                notice: sinon.spy(),\n                say: sinon.spy(),\n                act: sinon.spy(),\n                ctcp: sinon.spy()\n            }\n        }\n\n        it \"with intent of 'none'\" {\n            Response.send({\n                intent: \"none\",\n                message: undefined,\n                target: undefined\n            }, client);\n\n            assert(!client.notice.called);\n            assert(!client.say.called);\n            assert(!client.act.called);\n            assert(!client.ctcp.called);\n        }\n\n        it \"with intent of 'notice'\" {\n            Response.send({\n                intent: \"notice\",\n                message: \"Do you really want to know?\",\n                target: \"sender\"\n            }, client);\n            \n            assert(!client.say.called);\n            assert(!client.act.called);\n            assert(!client.ctcp.called);\n\n            assert(client.notice.calledOnce);\n            assert(client.notice.calledWithExactly(\"sender\", \"Do you really want to know?\"));\n        }\n\n        it \"with intent of 'say'\" {\n            Response.send({\n                intent: \"say\",\n                message: \"Your bot greets you!\",\n                target: \"#channel\"\n            }, client);\n            \n            assert(!client.notice.called);\n            assert(!client.act.called);\n            assert(!client.ctcp.called);\n\n            assert(client.say.calledOnce);\n            assert(client.say.calledWithExactly(\"#channel\", \"Your bot greets you!\"));\n        }\n\n        it \"with intent of 'act'\" {\n            Response.send({\n                intent: \"act\",\n                message: \"dances wildly!\",\n                target: \"#channel\"\n            }, client);\n            \n            assert(!client.notice.called);\n            assert(!client.say.called);\n            assert(!client.ctcp.called);\n\n            assert(client.act.calledOnce);\n            assert(client.act.calledWithExactly(\"#channel\", \"dances wildly!\"));\n        }\n\n        it \"with intent of 'ctcp'\" {\n            Response.send({\n                intent: \"ctcp\",\n                message: [\"FINGER\", \"gives you the index finger!\"],\n                target: \"sender\"\n            }, client);\n            \n            assert(!client.notice.called);\n            assert(!client.say.called);\n            assert(!client.act.called);\n\n            assert(client.ctcp.calledOnce);\n            assert(client.ctcp.calledWithExactly(\"sender\", \"FINGER\", \"gives you the index finger!\"));\n        }\n    }\n}"],"sourceRoot":"/source/"}