{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/message.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","Message","hostmask","nickname","server","channel","arg1","arg2","restargs","reason","nick1","nick2","nick3","messages","generic","generic_args","generic_prefix_server_args","generic_prefix_hostmask","generic_oddspacing","privmsg_channel","privmsg_query","privmsg_oddspacing","join","part","part_reason","quit","quit_reason","a_353_with_whitespace","describe","it","message","command","params","prefix","tags","username","hostname","isQuery","nicknamename","undefined","hasOwnProperty","nicknames","length"],"mappings":"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","file":"message.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst Message = require('../lib/message');\n\nconst hostmask = 'sender!malicious@test.suite.net';\nconst nickname = 'buddy';\nconst server = 'server.network.net';\nconst channel = '#channel';\nconst arg1 = 'arg-1';\nconst arg2 = 'arg-2';\nconst restargs = 'rest arguments';\nconst reason = 'Because I want to.';\nconst nick1 = \"adam\";\nconst nick2 = \"beatrice\";\nconst nick3 = \"charlie\";\n\nconst messages = {\n    generic:                    format('GENERIC'),\n    generic_args:               format('GENERIC %s %s :%s', arg1, arg2, restargs),\n    generic_prefix_server_args: format(':%s GENERIC %s %s :%s', server, arg1, arg2, restargs),\n    generic_prefix_hostmask:    format(':%s GENERIC', hostmask),\n    generic_oddspacing:         format('GENERIC    %s     %s    :%s', arg1, arg2, 'rest arguments    '),\n\n    privmsg_channel:            format(':%s PRIVMSG %s :%s', hostmask, channel, 'somebody said something'),\n    privmsg_query:              format(':%s PRIVMSG %s :%s', hostmask, nickname, 'hi hi'),\n    privmsg_oddspacing:         ':sender!user@localhost PRIVMSG #test :    testbot:     testcommand     ',\n\n    join:                       format(':%s JOIN %s', hostmask, channel),\n\n    part:                       format(':%s PART %s', hostmask, channel),\n    part_reason:                format(':%s PART %s :%s', hostmask, channel, reason),\n\n    quit:                       format(':%s QUIT', hostmask),\n    quit_reason:                format(':%s QUIT :%s', hostmask, reason),\n    a_353_with_whitespace:      format(':%s 353 %s = %s :%s %s %s ', server, nickname, channel, nick1, nick2, nick3)\n};\n\ndescribe 'Message' {\n    describe 'common properties' {\n        it 'for no-args, no-prefix, no-tags' {\n            const message = Message(messages.generic);\n\n            assert(message.command === 'generic');\n            assert(equal(message.params, []));\n            assert(message.prefix === '');\n            assert(equal(message.tags, {}));\n            assert(message.hostmask === null);\n        }\n\n        it 'for args, no-prefix, no-tags' {\n            const message = Message(messages.generic_args);\n\n            assert(message.command === 'generic')\n            assert(equal(message.params, [arg1, arg2, restargs]));\n            assert(message.prefix === '');\n            assert(equal(message.tags, {}));\n            assert(message.hostmask === null);\n        }\n\n        it 'for args, server prefix, no-tags' {\n            const message = Message(messages.generic_prefix_server_args);\n\n            assert(message.command === 'generic');\n            assert(equal(message.params, [arg1, arg2, restargs]));\n            assert(message.prefix === server);\n            assert(equal(message.tags, {}));\n            assert(message.hostmask === null);\n        }\n\n        it 'for no-args, hostmask prefix, no-tags' {\n            const message = Message(messages.generic_prefix_hostmask);\n\n            assert(message.command === 'generic');\n            assert(equal(message.params, []));\n            assert(message.prefix === hostmask);\n            assert(equal(message.tags, {}));\n            assert(equal(message.hostmask, {nickname: 'sender', username: 'malicious', hostname: 'test.suite.net'}));\n            assert(message.nickname === message.hostmask.nickname);\n        }\n\n        it 'handles odd spacing' {\n            const message = Message(messages.generic_oddspacing);\n\n            assert(message.command === 'generic');\n            assert(equal(message.params, [arg1, arg2, 'rest arguments    ']));\n            assert(message.prefix === '');\n            assert(equal(message.tags, {}));\n            assert(message.hostmask === null);\n        }\n    }\n\n    describe 'of type:' {\n        describe 'privmsg:' {\n            it 'channel' {\n                const message = Message(messages.privmsg_channel);\n\n                assert(message.command === 'privmsg');\n                assert(!message.isQuery);\n                assert(message.nicknamename === message.hostmask.nicknamename)\n                assert(message.channel === '#channel');\n                assert(message.message === 'somebody said something');\n            }\n\n            it 'query' {\n                const message = Message(messages.privmsg_query);\n\n                assert(message.command === 'privmsg');\n                assert(message.channel === 'sender');\n\n                assert(message.isQuery)\n                assert(message.message === 'hi hi');\n            }\n\n            it 'odd spacing' {\n                const message = Message(messages.privmsg_oddspacing);\n\n                assert(message.params[0] === '#test');\n                assert(message.params[1] === '    testbot:     testcommand     ');\n\n                assert(message.command === 'privmsg');\n                assert(message.channel === '#test');\n\n                assert(!message.isQuery);\n                assert(message.message === 'testbot:     testcommand');\n            }\n        }\n\n        it 'join' {\n            const message = Message(messages.join);\n\n            assert(message.channel === channel);\n        }\n\n        describe 'part:' {\n            it 'with reason' {\n                const message = Message(messages.part_reason);\n\n                assert(message.channel === channel);\n                assert(message.reason === reason);\n            }\n\n            it 'without reason' {\n                const message = Message(messages.part);\n\n                assert(message.channel === channel);\n                assert(message.reason === undefined);\n                assert(message.hasOwnProperty('reason'));\n            }\n        }\n\n        describe 'quit:' {\n            it 'with reason' {\n                const message = Message(messages.quit_reason);\n\n                assert(message.reason === reason);       \n            }\n\n            it 'without reason' {\n                const message = Message(messages.quit);\n\n                assert(message.reason === undefined);\n                assert(message.hasOwnProperty('reason'));   \n            }\n        }\n\n        describe '353:' {\n            it 'creates correct nicknames array' {\n                var message = Message(messages.a_353_with_whitespace);\n\n                assert(message.nicknames.length === 3);\n                assert(message.nicknames[0] === \"adam\");\n                assert(message.nicknames[1] === \"beatrice\");\n                assert(message.nicknames[2] === \"charlie\");\n            }\n        }\n    }\n}"],"sourceRoot":"/source/"}