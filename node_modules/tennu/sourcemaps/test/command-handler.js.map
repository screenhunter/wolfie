{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/command-handler.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","logger","info","notice","warn","error","CommandHandler","Message","Promise","config","prefix","commandname","channel","sender","nickname","arg1","arg2","nicknamefn","chanmsg","message","privmsg","messages","noncommand","command","detect","trigger","highlight","case_insensitive_highlight","toUpperCase","query","query_with_trigger","highlight_oddspacing","args","args_oddspacing","describe","handler","receiver","beforeEach","say","spy","it","parse","undefined","done","on","after","called","e","_sender","response","arguments","length","resolve","failHandler","reject","Error","catch","err","sender$2"],"mappings":"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","file":"command-handler.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst CommandHandler = require('../lib/command-handler.js');\nconst Message = require('../lib/message.js');\nconst Promise = require('bluebird');\n\nconst config = {\n    'command-trigger': '!'\n};\n\nconst prefix = 'sender!user@localhost';\nconst commandname = 'command';\nconst channel = '#test';\nconst sender = 'sender';\nconst nickname = 'testbot';\nconst arg1 = 'arg-1';\nconst arg2 = 'arg-2';\n\nconst nicknamefn = function () { return nickname; };\n\nconst chanmsg = function (message) {\n    return format(format(':%s PRIVMSG %s :%s', prefix, channel, message));\n};\nconst privmsg = function (message) {\n    return format(format(':%s PRIVMSG %s :%s', prefix, nickname, message));\n};\n\nconst messages = {\n    noncommand:               chanmsg('hello'),\n    command:                  privmsg(format('%s',            commandname)),\n    detect: {\n        trigger:              chanmsg(format('!%s',           commandname)),\n        highlight:            chanmsg(format('%s: %s',        nickname, commandname)),\n        case_insensitive_highlight: chanmsg(format('%s: %s',  nickname.toUpperCase(), commandname)),\n        query:                privmsg(format('%s',            commandname)),\n        query_with_trigger:   privmsg(format('!%s',           commandname)),\n        highlight_oddspacing: chanmsg(format('  %s:   %s   ', nickname, commandname)),\n    },\n    args:                     privmsg(format('%s %s %s',      commandname, arg1, arg2)),\n    args_oddspacing:          privmsg(format('%s  %s   %s  ', commandname, arg1, arg2)),\n};\n\ndescribe 'Command Handler' {\n    var handler, receiver;\n\n    beforeEach {\n        receiver = {\n            say: sinon.spy()\n        };\n\n        handler = CommandHandler(config, receiver, nicknamefn, logger);\n    }\n\n    describe 'command detection:' {\n        it 'ignores non-commands by returning undefined' {\n            const message = Message(messages.noncommand);\n            assert(handler.parse(message) === undefined);\n        }\n\n        describe 'Recognition Types:' {\n            it 'Trigger' {\n                const command = handler.parse(Message(messages.detect.trigger));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n\n            it 'Highlights' {\n                const command = handler.parse(Message(messages.detect.highlight));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n\n            it 'Highlights in case insensitive way' {\n                const command = handler.parse(Message(messages.detect.case_insensitive_highlight));\n                \n                assert(command.command === commandname);\n                assert(equal(command.args, []));            \n            }\n\n            it 'Query' {\n                const command = handler.parse(Message(messages.detect.query));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n\n            it 'Query with trigger' {\n                const command = handler.parse(Message(messages.detect.query_with_trigger));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n        }\n\n        it '\"args\" property an array of the words of the message' {\n            const command = handler.parse(Message(messages.args));\n\n            assert(command.command === commandname);\n            assert(equal(command.args, [arg1, arg2]));\n        }\n\n        describe 'Odd Spacing:' {\n            it 'Highlight' {\n                const command = handler.parse(Message(messages.detect.highlight_oddspacing));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n\n            it 'Args' {\n                const command = handler.parse(Message(messages.args_oddspacing));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, [arg1, arg2]));\n            }\n        }\n\n        describe 'events are emitted' {\n            it 'of the command name' (done) {\n                handler.on(commandname, function (command) {\n                    assert(command.command === commandname);\n                    done();\n                });\n\n                handler.parse(Message(messages.command));\n            }\n        }\n    }\n\n    describe 'Response handling' {\n        it 'no response' (done) {\n            handler.after(function () {\n                try {\n                    logfn('After function called.');\n                    assert(!receiver.say.called);\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n\n            handler.on(commandname, function () {\n                return undefined;\n            });\n\n            handler.parse(Message(messages.command));\n        }\n\n        it 'string response' (done) {\n            receiver.say = function (_sender, response) {\n                try {\n                    assert(sender === _sender);\n                    assert(response === 'response');\n                    assert(arguments.length === 2);\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, function () {\n                return 'response';\n            });\n\n            handler.parse(Message(messages.command, receiver));\n        }\n\n        it '[string] response' (done) {\n            receiver.say = function (_sender, response) {\n                try {\n                    assert(sender === _sender);\n                    assert(equal(response, ['response']));\n                    assert(arguments.length === 2);\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, function () {\n                return ['response'];\n            });\n\n            handler.parse(Message(messages.command, receiver));\n        }\n\n        it 'Promise<string> response' (done) {\n            receiver.say = function (_sender, response) {\n                try {\n                    assert(sender === _sender);\n                    assert(response === 'response');\n                    assert(arguments.length === 2);\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, function () {\n                return Promise.resolve('response');\n            });\n\n            handler.parse(Message(messages.command, receiver));\n        }\n\n        it 'Promise<[string]> response' (done) {\n            receiver.say = function (_sender, response) {\n                try {\n                    assert(sender === _sender);\n                    assert(equal(response, ['response']));\n                    assert(arguments.length === 2);\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, function () {\n                return Promise.resolve(['response']);\n            });\n\n            handler.parse(Message(messages.command, receiver));\n        }\n\n        it 'Promise<string> after Promise#catch()' (done) {\n            const failHandler = function (command) {\n                return Promise\n                .reject(new Error())\n                .catch(function (err) {\n                    console.log(\"Returning sorry!\");\n                    return 'Sorry!';\n                });\n            };\n\n            receiver.say = function (sender, response) {\n                try {\n                    assert(response === 'Sorry!');\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, failHandler);\n\n            handler.parse(Message(messages.command, receiver));\n        }\n    }\n}"],"sourceRoot":"/source/"}