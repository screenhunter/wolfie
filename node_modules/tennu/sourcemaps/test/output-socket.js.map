{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/output-socket.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","logger","info","notice","warn","error","channel","nickname","nicknamefn","OutputSocket","EventEmitter","describe","socket","out","messageHandler","beforeEach","raw","spy","it","join","calledWithExactly","done","joinmsg","emit","then","say","part","quit"],"mappings":"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","file":"output-socket.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst channel = \"#test\";\nconst nickname = 'testbot';\n\nconst nicknamefn = function () { return nickname; };\n\nconst OutputSocket = require('../lib/output-socket.js');\nconst EventEmitter = require('after-events');\n\ndescribe 'IRC Output Socket:' {\n    var socket, out, messageHandler;\n\n    beforeEach {\n        logfn(/* newline */);\n        messageHandler = new EventEmitter();\n        socket = { raw: sinon.spy() };\n        out = new OutputSocket(socket, messageHandler, nicknamefn, logger);\n    }\n\n    describe 'Join:' {\n        it 'Sends the command.' {\n            out.join(channel);\n            assert(socket.raw.calledWithExactly(format(\"JOIN :%s\", channel)));\n        }\n\n        it 'On Success' (done) {\n            const joinmsg = {nickname: nickname, channel: channel};\n\n            socket.raw = function () {\n                messageHandler.emit('join', joinmsg);\n            };\n\n            out.join(channel).then(function (join) {\n                assert(join.channel === channel);\n                assert(join.nickname === nickname);\n                done();\n            });\n        }\n    }\n\n    it 'can send private messages' {\n        out.say('#test', 'Hi');\n        assert(socket.raw.calledWithExactly(\"PRIVMSG #test :Hi\"));\n    }\n\n    it 'can part without a reason' {\n        out.part('#test');\n        assert(socket.raw.calledWithExactly(\"PART #test\"));\n    }\n\n    it 'can part with a reason' {\n        out.part('#test', 'the reason');\n        assert(socket.raw.calledWithExactly(\"PART #test :the reason\"));\n    }\n\n    it 'can quit without a reason' {\n        out.quit();\n        assert(socket.raw.calledWithExactly(\"QUIT\"));\n    }\n\n    it 'can quit with a reason' {\n        out.quit('the reason');\n        assert(socket.raw.calledWithExactly(\"QUIT :the reason\"));\n    }\n}"],"sourceRoot":"/source/"}