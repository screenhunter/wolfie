{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/plugin/user.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","UserModule","describe","instance","client","beforeEach","error","init","isIdentifiedAs","clock","off_spy","handlers","exports","useFakeTimers","off","spy","onRegNick","onLoggedIn","onWhoisEnd","onError","on","_handlers","withArgs","whois","nickname","message","identifiedas","Error","tick","afterEach","restore","it","done","then","fulfilled","isIdentifiedAs$2","calledOnce","onTimeout","reason"],"mappings":"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","file":"plugin/user.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\n\nconst UserModule = require('../../tennu_plugins/user.js');\n\ndescribe 'User Module:' {\n    var instance, client;\n\n    beforeEach {\n        client = {\n            debug: logfn,\n            error: logfn\n        };\n\n        instance = UserModule.init(client, {});\n    }\n\n    describe 'Utility Methods:' {\n        beforeEach {\n            logfn(/* newline */);\n        }\n\n        describe 'isIdentifiedAs' {\n            var isIdentifiedAs, clock;\n            var off_spy, handlers;\n\n            beforeEach {\n                isIdentifiedAs = instance.exports.isIdentifiedAs;\n                clock = sinon.useFakeTimers();\n\n                client.off = off_spy = sinon.spy();\n\n                var onRegNick, onLoggedIn, onWhoisEnd, onError;\n                client.on = function (_handlers) {\n                    handlers = _handlers;\n\n                    onRegNick = handlers['rpl_whoisregnick'];\n                    onLoggedIn = handlers['rpl_whoisloggedin'];\n                    onWhoisEnd = handlers['rpl_endofwhois'];\n                    onError = handlers['err_nosuchnick'];\n                    off_spy.withArgs(handlers);\n                };\n\n                client.whois = function (nickname) {\n                    var message = {nickname: nickname};\n\n                    switch (nickname) {\n                        case 'nonexistent':\n                        onError(message);\n                        break;\n\n                        case 'unidentified':\n                        onWhoisEnd(message);\n                        break;\n\n                        case 'identified-307':\n                        case 'identified-else-307':\n                        onRegNick(message);\n                        onWhoisEnd(message);\n                        break;\n\n                        case 'identified-330':\n                        case 'identified-else-330':\n                        message.identifiedas = message.nickname;\n                        onLoggedIn(message);\n                        onWhoisEnd(message);\n                        break;\n\n                        case 'identified-alt':\n                        message.identifiedas = 'identified';\n                        onLoggedIn(message);\n                        onWhoisEnd(message);\n                        break;\n\n                        case 'timeout':\n                        break;\n\n                        default:\n                        throw new Error('whois method called with unknown argument: ' + nickname);\n                    }\n\n                    clock.tick(60 * 60 * 1000 + 1);\n                }\n            }\n\n            afterEach {\n                clock.restore();\n            }\n\n            it 'exists' {\n                assert(typeof instance.exports.isIdentifiedAs === 'function');\n            }\n\n            it 'returns false for nonexistent nicks' (done) {\n                instance.exports.isIdentifiedAs('nonexistent', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === false);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns false for unidentified nicks' (done) {\n                isIdentifiedAs('unidentified', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === false);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns false for identified nicks to a different nickname (307).' (done) {\n                isIdentifiedAs('identified-else-307', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === false);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns false for identified nicks to a different nickname (330).' (done) {\n                isIdentifiedAs('identified-else-330', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === false);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns true for identified nicks-307' (done) {\n                isIdentifiedAs('identified-307', 'identified-307')\n                .then(function fulfilled (isIdentifiedAs) {\n                    logfn(isIdentifiedAs);\n                    assert(isIdentifiedAs === true);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns true for identified nicks-330' (done) {\n                isIdentifiedAs('identified-330', 'identified-330')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === true);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns true for identified nicks identified to requested nickname.' (done) {\n                isIdentifiedAs('identified-alt', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === true);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'times out after an hour' (done) {\n                isIdentifiedAs('timeout', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(!'called');\n                }, function onTimeout (reason) {\n                    assert(reason instanceof Error);\n                    assert(reason.message === 'Request timed out.');\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n        }\n    }\n}"],"sourceRoot":"/source/"}