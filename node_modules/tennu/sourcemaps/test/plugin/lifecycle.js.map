{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/plugin/lifecycle.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","LifecyclePlugin","strictMode","alwaysRestart","config","client","note","_end","spy","describe","only","plugin","lifecycle","beforeEach","init","exports","it","getState","isEdgeState","setState","skip","hooks","die","undefined","called","calledWith","calledOnce","spy1","spy2"],"mappings":"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","file":"plugin/lifecycle.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\n\nconst LifecyclePlugin = require('../../tennu_plugins/lifecycle');\n\n// Configuration values, changed before each test.\nvar strictMode = false;\nvar alwaysRestart = false;\nconst config = function () {\n\treturn {\n\t\tstrictMode: strictMode,\n\t\talwaysRestart: alwaysRestart\n\t};\n};\n\nconst client = {\n\tconfig: config,\n\tnote: logfn,\n\t_end: sinon.spy()\n};\n\ndescribe only 'Lifecycle Plugin' {\n\tvar plugin, lifecycle;\n\n\tbeforeEach {\n\t\tplugin = LifecyclePlugin.init(client);\n\t\tlifecycle = plugin.exports;\n\t}\n\n\tit \"starts out in 'initializing' state\" {\n\t\tassert(lifecycle.getState() === \"initializing\");\n\n\t\tassert(lifecycle.isEdgeState() === false);\n\t}\n\n\tit \"can switch from 'initializing' -> 'initialized'\" {\n\t\tlifecycle.setState(\"initialized\");\n\t\tassert(lifecycle.getState() === \"initialized\");\n\t}\n\n\t//it \"\"\n\n\tit skip 'takes a callback on the \\'die\\' hook and fires when the \\'die\\' export is called' {\n\t\tconst spy = sinon.spy();\n\t\tplugin.hooks.die(undefined, spy);\n\n\t\tassert(!spy.called);\n\n\t\tlifecycle.die(\"From\", \"Cause\");\n\n\t\tassert(spy.called);\n\t\tassert(spy.calledWith(\"From\", \"Cause\"));\n\n\t\t// Should be a no-op.\n\t\tlifecycle.die(\"From2\", \"Cause2\");\n\n\t\t// Spy should only have been called once.\n\t\tassert(spy.calledOnce);\n\t}\n\n\tit skip 'can take multiple callbacks' {\n\t\tconst spy1 = sinon.spy();\n\t\tconst spy2 = sinon.spy();\n\n\t\tplugin.hooks.die(undefined, spy1);\n\t\tplugin.hooks.die(undefined, spy2);\n\n\t\tlifecycle.die(\"From\", \"Cause\");\n\n\t\tassert(spy1.called);\n\t\tassert(spy2.called);\n\t}\n}"],"sourceRoot":"/source/"}