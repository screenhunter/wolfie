{"version":3,"file":"subscriber.sjs","names":[],"mappings":"","sources":["subscriber.sjs"],"sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\n\nconst BiSubscriber = require('../lib/bisubscriber');\nconst EventEmitter = require('events').EventEmitter;\n\ndescribe 'BiSubscribers' {\n    var subscriber, primary, secondary;\n    beforeEach {\n        logfn(/* newline */);\n        primary = new EventEmitter();\n        secondary = new EventEmitter();\n        subscriber = new BiSubscriber(primary, secondary);\n    }\n\n    describe 'subscribe events to two event emitters' {\n        var primarySpy, secondarySpy;\n\n        beforeEach {\n            primarySpy = sinon.spy();\n            secondarySpy = sinon.spy();\n        }\n\n        it 'treats most events as primary events' {\n            subscriber.on('event', primarySpy);\n            primary.emit('event');\n\n            assert(primarySpy.called);\n            assert(!secondarySpy.called);\n        }\n\n        it 'treats events starting with \"!\" to be secondary' {\n            subscriber.on('!event', secondarySpy);\n            secondary.emit('event');\n\n            assert(!primarySpy.called);\n            assert(secondarySpy.called);\n        }\n\n        it 'can subscribe multiple events' {\n            const primaryDataSpy = sinon.spy();\n            const secondaryDataSpy = sinon.spy();\n\n            subscriber.on({\n                'event': primarySpy,\n                '!event': secondarySpy,\n                'data': primaryDataSpy,\n                '!data': secondaryDataSpy\n            });\n\n            primary.emit('event');\n\n            assert(primarySpy.called);\n            assert(!secondarySpy.called);\n\n            secondary.emit('data');\n\n            assert(!primaryDataSpy.called);\n            assert(secondaryDataSpy.called);\n        }\n    }\n\n    describe 'quantification (on vs. once)' {\n        var spy;\n\n        beforeEach {\n            spy = sinon.spy();\n        }\n\n        it 'handles once one time (primary)' {\n            subscriber.once('event', spy);\n\n            primary.emit('event');\n            primary.emit('event');\n\n            assert(spy.calledOnce);\n        }\n\n        it 'handles once one time (secondary)' {\n            subscriber.once('!event', spy);\n\n            secondary.emit('event');\n            secondary.emit('event');\n\n            assert(spy.calledOnce);\n        }\n\n        it 'handles on multiple times' {\n            subscriber.on('event', spy);\n\n            primary.emit('event');\n            primary.emit('event');\n\n            assert(spy.calledTwice);\n        }\n\n        it 'handles once one time' {\n            subscriber.on('!event', spy);\n\n            secondary.emit('event');\n            secondary.emit('event');\n\n            assert(spy.calledTwice);\n        }\n    }\n\n    describe 'unsubscribing' {\n        var spy;\n\n        beforeEach {\n            spy = sinon.spy();\n        }\n\n        it 'primary w/two arg version' {\n            subscriber.on('event', spy);\n            primary.emit('event');\n            subscriber.off('event', spy);\n            primary.emit('event');\n\n            assert(spy.calledOnce);\n        }\n\n        it 'primary w/object version' {\n            subscriber.on('event', spy);\n            subscriber.on('event2', spy);\n\n            primary.emit('event2');\n\n            subscriber.off({\n                'event': spy,\n                'event2': spy\n            });\n\n            primary.emit('event');\n            primary.emit('event2');\n\n            assert(spy.calledOnce);\n        }\n    }\n}"],"sourceRoot":"/source/"}