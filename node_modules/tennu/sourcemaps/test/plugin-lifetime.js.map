{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/client.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","LifetimePlugin","describe","instance","beforeEach","init","it","spy","hooks","die","undefined","called","exports","calledWith","calledOnce","spy2"],"mappings":"AAAA,MAAMA,KAAA,GAAQC,OAAA,CAAQ,OAAR,CAAd;AACA,MAAMC,MAAA,GAASD,OAAA,CAAQ,eAAR,CAAf,CADA;AAEA,MAAME,KAAA,GAAQF,OAAA,CAAQ,UAAR,CAAd,CAFA;AAGA,MAAMG,OAAA,GAAUH,OAAA,CAAQ,MAAR,EAAgBG,OAAhC,CAHA;AAIA,MAAMC,MAAA,GAASJ,OAAA,CAAQ,MAAR,EAAgBI,MAA/B,CAJA;AAKAJ,OAAA,CAAQ,oBAAR,EAA8BK,OAA9B,GALA;AAOA,MAAMC,KAAA,GAAQ,KAAd,CAPA;AAQA,MAAMC,KAAA,GAAQD,KAAA,GAAQE,OAAA,CAAQC,GAAR,CAAYC,IAAZ,CAAiBF,OAAjB,CAAR,GAAoC,YAAY;AAAA,KAA9D,CARA;AAUA,MAAMG,cAAA,GAAiBX,OAAA,CAAQ,2BAAR,CAAvB,CAVA;AAGQY,QAAA,CASC,iBATD,EAAgB,YAAY;AAAA,IAUnC,IAAIC,QAAJ,CAVmC;AAAA,IAkE5BC,UAAA,CAAW,YAAY;AAAA,QArD7BD,QAAA,GAAWF,cAAA,CAAeI,IAAf,CAAoB,EAApB,CAAX,CAqD6B;AAAA,KAAvB,EAlE4B;AAAA,IAuB5BC,EAAA,CAPJ,kFAOI,EAAU,YAAY;AAAA,QAN5B,IAAIC,GAAA,GAAMlB,KAAA,CAAMkB,GAAN,EAAV,CAM4B;AAAA,QAL5BJ,QAAA,CAASK,KAAT,CAAeC,GAAf,CAAmBC,SAAnB,EAA8BH,GAA9B,EAK4B;AAAA,QAH5BhB,MAAA,CAAO,CAACgB,GAAA,CAAII,MAAZ,EAG4B;AAAA,QAD5BR,QAAA,CAASS,OAAT,CAAiBH,GAAjB,CAAqB,MAArB,EAA6B,OAA7B,EAC4B;AAAA,QAC5BlB,MAAA,CAAOgB,GAAA,CAAII,MAAX,EAD4B;AAAA,QAE5BpB,MAAA,CAAOgB,GAAA,CAAIM,UAAJ,CAAe,MAAf,EAAuB,OAAvB,CAAP,EAF4B;AAAA,QAK5B;AAAA,QAAAV,QAAA,CAASS,OAAT,CAAiBH,GAAjB,CAAqB,OAArB,EAA8B,QAA9B,EAL4B;AAAA,QAQ5B;AAAA,QAAAlB,MAAA,CAAOgB,GAAA,CAAIO,UAAX,EAR4B;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BR,EAAA,CAWJ,6BAXI,EAAU,YAAY;AAAA,QAY5B,IAAIC,GAAA,GAAMlB,KAAA,CAAMkB,GAAN,EAAV,CAZ4B;AAAA,QAa5B,IAAIQ,IAAA,GAAO1B,KAAA,CAAMkB,GAAN,EAAX,CAb4B;AAAA,QAe5BJ,QAAA,CAASK,KAAT,CAAeC,GAAf,CAAmBC,SAAnB,EAA8BH,GAA9B,EAf4B;AAAA,QAgB5BJ,QAAA,CAASK,KAAT,CAAeC,GAAf,CAAmBC,SAAnB,EAA8BK,IAA9B,EAhB4B;AAAA,QAkB5BZ,QAAA,CAASS,OAAT,CAAiBH,GAAjB,CAAqB,MAArB,EAA6B,OAA7B,EAlB4B;AAAA,QAoB5BlB,MAAA,CAAOgB,GAAA,CAAII,MAAX,EApB4B;AAAA,QAqB5BpB,MAAA,CAAOwB,IAAA,CAAKJ,MAAZ,EArB4B;AAAA,KAAtB,EAvB4B;AAAA,CAA5B","file":"plugin-lifetime.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst Client = require('../lib/client.js');\nconst NetSocket = require('../test-helpers/mock-net-socket.js');\n\nconst network = {\n    'nickname': 'testbot',\n    'username': 'testuser',\n    'server': 'irc.test.net',\n    'nickserv' : 'nickserv',\n    'auth-password' : 'testpass',\n    'channels' : ['#test'],\n};\n\nconst fakeWrite = function fakeWrite (message) {\n    fakeWrite.spy.apply(this, arguments);\n\n    message = message.substring(0, message.length - 2);\n    // console.log('Fakewrite called with message `' + message + '`');\n    try {\n        if (!this.connected) return;\n\n        switch (message) {\n            case 'JOIN :#test':\n            this.emit('data', [\n                ':testbot!testuser@localhost JOIN :#test',\n                ':irc.localhost.net 353 testbot = #test :@testbot',\n                ':irc.localhost.net 366 testbot #test :End of /NAMES list.\\r\\n'].join('\\r\\n'));\n            break;\n            case 'QUIT':\n            this.emit('data', 'ERROR :Closing Link: testbot[localhost] (Quit: testbot)\\r\\n');\n            break;\n            case 'NICK newNick':\n            this.emit('data', ':testbot!testuser@localhost NICK :newNick\\r\\n');\n            break;\n            case 'PART #test':\n            this.emit('data', ':testbot!testuser@localhost PART #test\\r\\n');\n            break;\n            case 'PRIVMSG nickserv :identify testpass':\n            this.emit('data', ':nickserv!services@test.net NOTICE testbot :Password accepted - you are now recognized.\\r\\n');\n            break;\n            default:\n            void 0;\n        }\n    } catch (e) {\n        console.log('ERROR');\n        console.log(e.stack);\n    }\n};\n\nconst boxfn = function (value) {\n    return function () { return value; };\n};\n\ndescribe 'Tennu Client' {\n    var netsocket, tennu;\n\n    beforeEach {\n        logfn(/* newline */);\n\n        fakeWrite.spy = sinon.spy();\n\n        netsocket = new NetSocket(logger);\n        netsocket.write = fakeWrite;\n\n        tennu = Client(network, {\n            NetSocket: boxfn(netsocket),\n            Logger: boxfn(logger)\n        });\n    }\n\n    afterEach {\n        logfn('End of test.');\n    }\n\n    it 'Basic Connecting and Disconnecting' {\n        assert(tennu.connected === false);\n        tennu.connect();\n        assert(tennu.connected === true);\n        tennu.disconnect();\n        assert(tennu.connected === false);\n    }\n\n    // Move this to its own file.\n    describe 'Nickname Tracking' {\n        beforeEach (done) {\n            netsocket.on('connect', done);\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'tracks its initial nickname' {\n            assert(tennu.nickname() === 'testbot');\n        }\n\n        describe 'changing nick' {\n            beforeEach (done) {\n                tennu.on('nick', function () { done() });\n                tennu.nick('newNick');\n            }\n\n            it 'tracks its changed nick' {\n                assert(tennu.nickname() === 'newNick');\n            }\n        }\n    }\n\n    describe 'autojoin' {\n        beforeEach (done) {\n            tennu.on('join', function () { done() });\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'automatically joins specified channels.' {\n            assert(fakeWrite.spy.calledWith('JOIN :#test\\r\\n', 'utf-8'));\n        }\n    }\n\n    describe 'autoidentify' {\n        beforeEach (done) {\n            tennu.on('notice', function(e) {\n                if (e.nickname === 'nickserv') {\n                    done();\n                }\n            });\n\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'automatically identifies to services.' {\n            assert(fakeWrite.spy.calledWith('PRIVMSG nickserv :identify testpass\\r\\n', 'utf-8'));\n        }\n    }\n}"],"sourceRoot":"/source/"}