{"version":3,"file":"plugin-user.sjs","names":[],"mappings":"","sources":["plugin-user.sjs"],"sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\n\nconst UserModule = require('../tennu_plugins/user.js');\n\ndescribe 'User Module:' {\n    var instance, client;\n\n    beforeEach {\n        client = {\n            debug: logfn,\n            error: logfn\n        };\n\n        instance = UserModule.init(client, {});\n    }\n\n    describe 'Utility Methods:' {\n        beforeEach {\n            logfn(/* newline */);\n        }\n\n        describe 'isIdentifiedAs' {\n            var isIdentifiedAs, clock;\n            var off_spy, handlers;\n\n            beforeEach {\n                isIdentifiedAs = instance.exports.isIdentifiedAs;\n                clock = sinon.useFakeTimers();\n\n                client.off = off_spy = sinon.spy();\n\n                var onRegNick, onLoggedIn, onWhoisEnd, onError;\n                client.on = function (_handlers) {\n                    handlers = _handlers;\n\n                    onRegNick = handlers['rpl_whoisregnick'];\n                    onLoggedIn = handlers['rpl_whoisloggedin'];\n                    onWhoisEnd = handlers['rpl_endofwhois'];\n                    onError = handlers['err_nosuchnick'];\n                    off_spy.withArgs(handlers);\n                };\n\n                client.whois = function (nickname) {\n                    var message = {nickname: nickname};\n\n                    switch (nickname) {\n                        case 'nonexistent':\n                        onError(message);\n                        break;\n\n                        case 'unidentified':\n                        onWhoisEnd(message);\n                        break;\n\n                        case 'identified-307':\n                        case 'identified-else-307':\n                        onRegNick(message);\n                        onWhoisEnd(message);\n                        break;\n\n                        case 'identified-330':\n                        case 'identified-else-330':\n                        message.identifiedas = message.nickname;\n                        onLoggedIn(message);\n                        onWhoisEnd(message);\n                        break;\n\n                        case 'identified-alt':\n                        message.identifiedas = 'identified';\n                        onLoggedIn(message);\n                        onWhoisEnd(message);\n                        break;\n\n                        case 'timeout':\n                        break;\n\n                        default:\n                        throw new Error('whois method called with unknown argument: ' + nickname);\n                    }\n\n                    clock.tick(60 * 60 * 1000 + 1);\n                }\n            }\n\n            afterEach {\n                clock.restore();\n            }\n\n            it 'exists' {\n                assert(typeof instance.exports.isIdentifiedAs === 'function');\n            }\n\n            it 'returns false for nonexistent nicks' (done) {\n                instance.exports.isIdentifiedAs('nonexistent', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === false);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns false for unidentified nicks' (done) {\n                isIdentifiedAs('unidentified', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === false);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns false for identified nicks to a different nickname (307).' (done) {\n                isIdentifiedAs('identified-else-307', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === false);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns false for identified nicks to a different nickname (330).' (done) {\n                isIdentifiedAs('identified-else-330', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === false);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns true for identified nicks-307' (done) {\n                isIdentifiedAs('identified-307', 'identified-307')\n                .then(function fulfilled (isIdentifiedAs) {\n                    logfn(isIdentifiedAs);\n                    assert(isIdentifiedAs === true);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns true for identified nicks-330' (done) {\n                isIdentifiedAs('identified-330', 'identified-330')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === true);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'returns true for identified nicks identified to requested nickname.' (done) {\n                isIdentifiedAs('identified-alt', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(isIdentifiedAs === true);\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n\n            it 'times out after an hour' (done) {\n                isIdentifiedAs('timeout', 'identified')\n                .then(function fulfilled (isIdentifiedAs) {\n                    assert(!'called');\n                }, function onTimeout (reason) {\n                    assert(reason instanceof Error);\n                    assert(reason.message === 'Request timed out.');\n                    assert(off_spy.withArgs(handlers).calledOnce);\n                })\n                .then(done)\n                .done();\n            }\n        }\n    }\n}"],"sourceRoot":"/source/"}