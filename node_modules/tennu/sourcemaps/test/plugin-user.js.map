{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/client.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","UserModule","describe","instance","client","beforeEach","error","init","isIdentifiedAs","clock","off_spy","handlers","exports","useFakeTimers","off","spy","onRegNick","onLoggedIn","onWhoisEnd","onError","on","_handlers","withArgs","whois","nickname","message","identifiedas","Error","tick","afterEach","restore","it","done","then","fulfilled","isIdentifiedAs$2","calledOnce","onTimeout","reason"],"mappings":"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","file":"plugin-user.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst Client = require('../lib/client.js');\nconst NetSocket = require('../test-helpers/mock-net-socket.js');\n\nconst network = {\n    'nickname': 'testbot',\n    'username': 'testuser',\n    'server': 'irc.test.net',\n    'nickserv' : 'nickserv',\n    'auth-password' : 'testpass',\n    'channels' : ['#test'],\n};\n\nconst fakeWrite = function fakeWrite (message) {\n    fakeWrite.spy.apply(this, arguments);\n\n    message = message.substring(0, message.length - 2);\n    // console.log('Fakewrite called with message `' + message + '`');\n    try {\n        if (!this.connected) return;\n\n        switch (message) {\n            case 'JOIN :#test':\n            this.emit('data', [\n                ':testbot!testuser@localhost JOIN :#test',\n                ':irc.localhost.net 353 testbot = #test :@testbot',\n                ':irc.localhost.net 366 testbot #test :End of /NAMES list.\\r\\n'].join('\\r\\n'));\n            break;\n            case 'QUIT':\n            this.emit('data', 'ERROR :Closing Link: testbot[localhost] (Quit: testbot)\\r\\n');\n            break;\n            case 'NICK newNick':\n            this.emit('data', ':testbot!testuser@localhost NICK :newNick\\r\\n');\n            break;\n            case 'PART #test':\n            this.emit('data', ':testbot!testuser@localhost PART #test\\r\\n');\n            break;\n            case 'PRIVMSG nickserv :identify testpass':\n            this.emit('data', ':nickserv!services@test.net NOTICE testbot :Password accepted - you are now recognized.\\r\\n');\n            break;\n            default:\n            void 0;\n        }\n    } catch (e) {\n        console.log('ERROR');\n        console.log(e.stack);\n    }\n};\n\nconst boxfn = function (value) {\n    return function () { return value; };\n};\n\ndescribe 'Tennu Client' {\n    var netsocket, tennu;\n\n    beforeEach {\n        logfn(/* newline */);\n\n        fakeWrite.spy = sinon.spy();\n\n        netsocket = new NetSocket(logger);\n        netsocket.write = fakeWrite;\n\n        tennu = Client(network, {\n            NetSocket: boxfn(netsocket),\n            Logger: boxfn(logger)\n        });\n    }\n\n    afterEach {\n        logfn('End of test.');\n    }\n\n    it 'Basic Connecting and Disconnecting' {\n        assert(tennu.connected === false);\n        tennu.connect();\n        assert(tennu.connected === true);\n        tennu.disconnect();\n        assert(tennu.connected === false);\n    }\n\n    // Move this to its own file.\n    describe 'Nickname Tracking' {\n        beforeEach (done) {\n            netsocket.on('connect', done);\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'tracks its initial nickname' {\n            assert(tennu.nickname() === 'testbot');\n        }\n\n        describe 'changing nick' {\n            beforeEach (done) {\n                tennu.on('nick', function () { done() });\n                tennu.nick('newNick');\n            }\n\n            it 'tracks its changed nick' {\n                assert(tennu.nickname() === 'newNick');\n            }\n        }\n    }\n\n    describe 'autojoin' {\n        beforeEach (done) {\n            tennu.on('join', function () { done() });\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'automatically joins specified channels.' {\n            assert(fakeWrite.spy.calledWith('JOIN :#test\\r\\n', 'utf-8'));\n        }\n    }\n\n    describe 'autoidentify' {\n        beforeEach (done) {\n            tennu.on('notice', function(e) {\n                if (e.nickname === 'nickserv') {\n                    done();\n                }\n            });\n\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'automatically identifies to services.' {\n            assert(fakeWrite.spy.calledWith('PRIVMSG nickserv :identify testpass\\r\\n', 'utf-8'));\n        }\n    }\n}"],"sourceRoot":"/source/"}