{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/integration/lifecycle.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","logger","info","notice","warn","error","Client","NetSocket","network","fakeWrite","fakeWrite$2","message","spy","apply","arguments","substring","length","connected","emit","join","e","stack","boxfn","value","describe","netsocket","tennu","afterEach","disconnect","beforeEach","write","Logger","skip","connect","it","only","done","lifetime","getPlugin","onDie","from","cause","die","restore","setState","calledWith"],"mappings":"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","file":"integration/lifecycle.js","sourcesContent":["const sinon = require(\"sinon\");\nconst assert = require(\"better-assert\");\nconst equal = require(\"deep-eql\");\nconst inspect = require(\"util\").inspect;\nconst format = require(\"util\").format;\nrequire(\"source-map-support\").install();\n\nconst debug = true;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst Client = require(\"../../lib/client.js\");\nconst NetSocket = require(\"../../test-helpers/mock-net-socket.js\");\n\nconst network = {\n    \"nickname\": \"testbot\",\n    \"username\": \"testuser\",\n    \"server\": \"irc.test.net\",\n    \"nickserv\" : \"nickserv\",\n    \"auth-password\" : \"testpass\",\n    \"channels\" : [\"#test\"]\n};\n\nconst fakeWrite = function fakeWrite (message) {\n    fakeWrite.spy.apply(this, arguments);\n\n    message = message.substring(0, message.length - 2);\n    // console.log(\"Fakewrite called with message `\" + message + \"`\");\n    try {\n        if (!this.connected) return;\n\n        switch (message) {\n            case \"JOIN :#test\":\n            this.emit(\"data\", [\n                \":testbot!testuser@localhost JOIN :#test\",\n                \":irc.localhost.net 353 testbot = #test :@testbot\",\n                \":irc.localhost.net 366 testbot #test :End of /NAMES list.\\r\\n\"].join(\"\\r\\n\"));\n            break;\n            case \"QUIT\":\n            this.emit(\"data\", \"ERROR :Closing Link: testbot[localhost] (Quit: testbot)\\r\\n\");\n            break;\n            case \"NICK newNick\":\n            this.emit(\"data\", \":testbot!testuser@localhost NICK :newNick\\r\\n\");\n            break;\n            case \"PART #test\":\n            this.emit(\"data\", \":testbot!testuser@localhost PART #test\\r\\n\");\n            break;\n            case \"PRIVMSG nickserv :identify testpass\":\n            this.emit(\"data\", \":nickserv!services@test.net NOTICE testbot :Password accepted - you are now recognized.\\r\\n\");\n            break;\n            default:\n            void 0;\n        }\n    } catch (e) {\n        console.log(\"ERROR\");\n        console.log(e.stack);\n    }\n};\n\nconst boxfn = function (value) {\n    return function () { return value; };\n};\n\ndescribe \"Lifecycle Integration:\" {\n    var netsocket, tennu;\n\n    afterEach {\n        tennu.disconnect();\n    }\n\n    beforeEach {\n        netsocket = new NetSocket(logger);\n        netsocket.write = fakeWrite;\n        fakeWrite.spy = sinon.spy();\n\n        tennu = Client(network, {\n            NetSocket: boxfn(netsocket),\n            Logger: boxfn(logger)\n        });\n    }\n\n    describe skip \"Dying\" {\n        beforeEach {\n            tennu.connect();\n        }\n\n        it only \"Calling `tennu.die(cause)` gives cause of ['external request', cause]\" (done) {\n            const lifetime = tennu.getPlugin(\"lifetime\");\n\n            lifetime.onDie(function (from, cause) {\n                assert(from === tennu);\n                assert(cause[0] === \"external request\");\n                assert(cause[1] === \"testing\");\n                assert(cause.length === 2);\n                done();\n            });\n\n            tennu.die(\"testing\");\n        }\n    }\n\n    describe only \"Unstartable\" {\n        beforeEach {\n            sinon.spy(logger, \"error\");\n        }\n\n        afterEach {\n            logger.error.restore();\n        }\n\n        it \"client will log to `error` level when you try to start in unstartable state\" {\n            tennu.getPlugin(\"lifecycle\").setState(\"unstartable\");\n            tennu.connect();\n\n            assert(logger.error.calledWith(\"Tennu\", \"Cannot start Tennu Client when in unstartable condition.\"));\n            assert(tennu.connected === false);\n        }\n    }\n}"],"sourceRoot":"/source/"}