{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/client.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","HelpPlugin","moduleHelps","a","b","b1","b2","b3","c","c1","d","client","config","value","describe","instance","help","HELP_NOT_FOUND","beforeEach","init","exports","hooks","it"],"mappings":"AAAA,MAAMA,KAAA,GAAQC,OAAA,CAAQ,OAAR,CAAd;AACA,MAAMC,MAAA,GAASD,OAAA,CAAQ,eAAR,CAAf,CADA;AAEA,MAAME,KAAA,GAAQF,OAAA,CAAQ,UAAR,CAAd,CAFA;AAGA,MAAMG,OAAA,GAAUH,OAAA,CAAQ,MAAR,EAAgBG,OAAhC,CAHA;AAIA,MAAMC,MAAA,GAASJ,OAAA,CAAQ,MAAR,EAAgBI,MAA/B,CAJA;AAKAJ,OAAA,CAAQ,oBAAR,EAA8BK,OAA9B,GALA;AAOA,MAAMC,KAAA,GAAQ,KAAd,CAPA;AAQA,MAAMC,KAAA,GAAQD,KAAA,GAAQE,OAAA,CAAQC,GAAR,CAAYC,IAAZ,CAAiBF,OAAjB,CAAR,GAAoC,YAAY;AAAA,KAA9D,CARA;AAUA,MAAMG,UAAA,GAAaX,OAAA,CAAQ,uBAAR,CAAnB,CAVA;AAYA,MAAMY,WAAA,GAAc;AAAA,QAChBC,CAAA,EAAG,KADa;AAAA,QAEhBC,CAAA,EAAG;AAAA,YACCA,CAAA,EAAG;AAAA,gBACC,KAAK,KADN;AAAA,gBAECC,EAAA,EAAI,KAFL;AAAA,gBAGCC,EAAA,EAAI;AAAA,oBAAC,OAAD;AAAA,oBAAU,OAAV;AAAA,iBAHL;AAAA,gBAICC,EAAA,EAAI,EACA,KAAK,OADL,EAJL;AAAA,aADJ;AAAA,SAFa;AAAA,QAYhBC,CAAA,EAAG,EACCC,EAAA,EAAI,KADL,EAZa;AAAA,QAehBC,CAAA,EAAG;AAAA,YAAC,OAAD;AAAA,YAAU,OAAV;AAAA,SAfa;AAAA,KAApB,CAZA;AA8BA,MAAMC,MAAA,GAAS;AAAA,QACXC,MAAA,EAAQ,UAAUC,KAAV,EAAiB;AAAA,YACrB,IAAIA,KAAA,KAAU,eAAd,EAA+B;AAAA,gBAC3B,OAAO,KAAP,CAD2B;AAAA,aADV;AAAA,SADd;AAAA,KAAf,CA9BA;AAGQC,QAAA,CAmCC,aAnCD,EAAgB,YAAY;AAAA,IAoChC,IAAIC,QAAJ,EAAcC,IAAd,EAAoBC,cAApB,CApCgC;AAAA,IAkE5BC,UAAA,CAAW,YAAY;AAAA,QA3BvBrB,KAAA,GA2BuB;AAAA,QAzBvBkB,QAAA,GAAWd,UAAA,CAAWkB,IAAX,CAAgBR,MAAhB,EAAwB,EAAxB,CAAX,CAyBuB;AAAA,QAxBvBM,cAAA,GAAiBF,QAAA,CAASK,OAAT,CAAiBH,cAAlC,CAwBuB;AAAA,QAtBvBF,QAAA,CAASM,KAAT,CAAeL,IAAf,CAAoB,GAApB,EAAyBd,WAAA,CAAYC,CAArC,EAsBuB;AAAA,QArBvBY,QAAA,CAASM,KAAT,CAAeL,IAAf,CAAoB,GAApB,EAAyBd,WAAA,CAAYE,CAArC,EAqBuB;AAAA,QApBvBW,QAAA,CAASM,KAAT,CAAeL,IAAf,CAAoB,GAApB,EAAyBd,WAAA,CAAYM,CAArC,EAoBuB;AAAA,QAnBvBO,QAAA,CAASM,KAAT,CAAeL,IAAf,CAAoB,GAApB,EAAyBd,WAAA,CAAYQ,CAArC,EAmBuB;AAAA,QAjBvBM,IAAA,GAAOD,QAAA,CAASK,OAAT,CAAiBJ,IAAxB,CAiBuB;AAAA,KAAvB,EAlE4B;AAAA,IAuB5BM,EAAA,CA6BD,2CA7BC,EAAU,YAAY;AAAA,QA8BtB/B,MAAA,CAAOyB,IAAA,CAAK,CAAC,KAAD,CAAL,MAAkBC,cAAzB,EA9BsB;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BK,EAAA,CAiCD,wDAjCC,EAAU,YAAY;AAAA,QAkCtB/B,MAAA,CAAOyB,IAAA,CAAK;AAAA,YAAC,KAAD;AAAA,YAAQ,UAAR;AAAA,SAAL,MAA8BC,cAArC,EAlCsB;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BK,EAAA,CAqCD,kFArCC,EAAU,YAAY;AAAA,QAsCtBzB,KAAA,CAAMJ,OAAA,CAAQuB,IAAA,CAAK,CAAC,GAAD,CAAL,CAAR,CAAN,EAtCsB;AAAA,QAuCtBzB,MAAA,CAAOyB,IAAA,CAAK,CAAC,GAAD,CAAL,MAAgB,KAAvB,EAvCsB;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BM,EAAA,CA0CD,iFA1CC,EAAU,YAAY;AAAA,QA2CtBzB,KAAA,CAAMJ,OAAA,CAAQuB,IAAA,CAAK,CAAC,GAAD,CAAL,CAAR,CAAN,EA3CsB;AAAA,QA4CtBzB,MAAA,CAAOC,KAAA,CAAMwB,IAAA,CAAK,CAAC,GAAD,CAAL,CAAN,EAAmB;AAAA,YAAC,OAAD;AAAA,YAAU,OAAV;AAAA,SAAnB,CAAP,EA5CsB;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BM,EAAA,CA+CD,qDA/CC,EAAU,YAAY;AAAA,QAgDtB/B,MAAA,CAAOyB,IAAA,CAAK,CAAC,GAAD,CAAL,MAAgB,KAAvB,EAhDsB;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BM,EAAA,CAmDD,6EAnDC,EAAU,YAAY;AAAA,QAoDtB/B,MAAA,CAAOyB,IAAA,CAAK,CAAC,GAAD,CAAL,MAAgBC,cAAvB,EApDsB;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BK,EAAA,CAuDD,6DAvDC,EAAU,YAAY;AAAA,QAwDtBzB,KAAA,CAAMJ,OAAA,CAAQuB,IAAA,CAAK;AAAA,YAAC,GAAD;AAAA,YAAM,IAAN;AAAA,SAAL,CAAR,CAAN,EAxDsB;AAAA,QAyDtBzB,MAAA,CAAOyB,IAAA,CAAK;AAAA,YAAC,GAAD;AAAA,YAAM,IAAN;AAAA,SAAL,MAAsB,KAA7B,EAzDsB;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BM,EAAA,CA4DD,2DA5DC,EAAU,YAAY;AAAA,QA6DtBzB,KAAA,CAAMJ,OAAA,CAAQuB,IAAA,CAAK;AAAA,YAAC,GAAD;AAAA,YAAM,IAAN;AAAA,SAAL,CAAR,CAAN,EA7DsB;AAAA,QA8DtBzB,MAAA,CAAOC,KAAA,CAAMwB,IAAA,CAAK;AAAA,YAAC,GAAD;AAAA,YAAM,IAAN;AAAA,SAAL,CAAN,EAAyB;AAAA,YAAC,OAAD;AAAA,YAAU,OAAV;AAAA,SAAzB,CAAP,EA9DsB;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BM,EAAA,CAiED,iDAjEC,EAAU,YAAY;AAAA,QAkEtBzB,KAAA,CAAMJ,OAAA,CAAQuB,IAAA,CAAK;AAAA,YAAC,GAAD;AAAA,YAAM,IAAN;AAAA,SAAL,CAAR,CAAN,EAlEsB;AAAA,QAmEtBzB,MAAA,CAAOyB,IAAA,CAAK;AAAA,YAAC,GAAD;AAAA,YAAM,IAAN;AAAA,SAAL,MAAsB,OAA7B,EAnEsB;AAAA,KAAtB,EAvB4B;AAAA,IAuB5BM,EAAA,CAsED,iEAtEC,EAAU,YAAY;AAAA,QAuEtBzB,KAAA,CAAMJ,OAAA,CAAQuB,IAAA,CAAK;AAAA,YAAC,GAAD;AAAA,YAAM,IAAN;AAAA,SAAL,CAAR,CAAN,EAvEsB;AAAA,QAwEtBzB,MAAA,CAAOyB,IAAA,CAAK;AAAA,YAAC,GAAD;AAAA,YAAM,IAAN;AAAA,SAAL,MAAsBC,cAA7B,EAxEsB;AAAA,KAAtB,EAvB4B;AAAA,CAA5B","file":"plugin-help.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst Client = require('../lib/client.js');\nconst NetSocket = require('../test-helpers/mock-net-socket.js');\n\nconst network = {\n    'nickname': 'testbot',\n    'username': 'testuser',\n    'server': 'irc.test.net',\n    'nickserv' : 'nickserv',\n    'auth-password' : 'testpass',\n    'channels' : ['#test'],\n};\n\nconst fakeWrite = function fakeWrite (message) {\n    fakeWrite.spy.apply(this, arguments);\n\n    message = message.substring(0, message.length - 2);\n    // console.log('Fakewrite called with message `' + message + '`');\n    try {\n        if (!this.connected) return;\n\n        switch (message) {\n            case 'JOIN :#test':\n            this.emit('data', [\n                ':testbot!testuser@localhost JOIN :#test',\n                ':irc.localhost.net 353 testbot = #test :@testbot',\n                ':irc.localhost.net 366 testbot #test :End of /NAMES list.\\r\\n'].join('\\r\\n'));\n            break;\n            case 'QUIT':\n            this.emit('data', 'ERROR :Closing Link: testbot[localhost] (Quit: testbot)\\r\\n');\n            break;\n            case 'NICK newNick':\n            this.emit('data', ':testbot!testuser@localhost NICK :newNick\\r\\n');\n            break;\n            case 'PART #test':\n            this.emit('data', ':testbot!testuser@localhost PART #test\\r\\n');\n            break;\n            case 'PRIVMSG nickserv :identify testpass':\n            this.emit('data', ':nickserv!services@test.net NOTICE testbot :Password accepted - you are now recognized.\\r\\n');\n            break;\n            default:\n            void 0;\n        }\n    } catch (e) {\n        console.log('ERROR');\n        console.log(e.stack);\n    }\n};\n\nconst boxfn = function (value) {\n    return function () { return value; };\n};\n\ndescribe 'Tennu Client' {\n    var netsocket, tennu;\n\n    beforeEach {\n        logfn(/* newline */);\n\n        fakeWrite.spy = sinon.spy();\n\n        netsocket = new NetSocket(logger);\n        netsocket.write = fakeWrite;\n\n        tennu = Client(network, {\n            NetSocket: boxfn(netsocket),\n            Logger: boxfn(logger)\n        });\n    }\n\n    afterEach {\n        logfn('End of test.');\n    }\n\n    it 'Basic Connecting and Disconnecting' {\n        assert(tennu.connected === false);\n        tennu.connect();\n        assert(tennu.connected === true);\n        tennu.disconnect();\n        assert(tennu.connected === false);\n    }\n\n    // Move this to its own file.\n    describe 'Nickname Tracking' {\n        beforeEach (done) {\n            netsocket.on('connect', done);\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'tracks its initial nickname' {\n            assert(tennu.nickname() === 'testbot');\n        }\n\n        describe 'changing nick' {\n            beforeEach (done) {\n                tennu.on('nick', function () { done() });\n                tennu.nick('newNick');\n            }\n\n            it 'tracks its changed nick' {\n                assert(tennu.nickname() === 'newNick');\n            }\n        }\n    }\n\n    describe 'autojoin' {\n        beforeEach (done) {\n            tennu.on('join', function () { done() });\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'automatically joins specified channels.' {\n            assert(fakeWrite.spy.calledWith('JOIN :#test\\r\\n', 'utf-8'));\n        }\n    }\n\n    describe 'autoidentify' {\n        beforeEach (done) {\n            tennu.on('notice', function(e) {\n                if (e.nickname === 'nickserv') {\n                    done();\n                }\n            });\n\n            tennu.connect();\n        }\n\n        afterEach (done) {\n            netsocket.on('close', done);\n            tennu.disconnect();\n        }\n\n        it 'automatically identifies to services.' {\n            assert(fakeWrite.spy.calledWith('PRIVMSG nickserv :identify testpass\\r\\n', 'utf-8'));\n        }\n    }\n}"],"sourceRoot":"/source/"}