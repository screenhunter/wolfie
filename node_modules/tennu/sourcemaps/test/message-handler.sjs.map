{"version":3,"file":"message-handler.sjs","names":[],"mappings":"","sources":["message-handler.sjs"],"sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst log = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: log, info: log, notice: log, warn: log, error: log};\n\nconst MessageHandler = require('../lib/message-handler.js');\nconst Message = require('../lib/message.js');\n\nconst id = (function () {\n    var ix = 0;\n    return function () {\n        ix += 1;\n        return ix;\n    }\n})();\n\nconst prefix = 'irc.mibbit.net';\nconst command = 'generic';\nconst arg1 = 'arg1';\nconst arg2 = 'arg2';\nconst argr = 'rest args';\nconst raw = format(':%s %s %s %s :%s', prefix, command, arg1, arg2, argr);\n\ndescribe 'Message Parsers' {\n    var parser, receiver;\n\n    beforeEach {\n        log(/* newline */);\n\n        receiver = {_id: id()};\n        parser = MessageHandler(receiver, logger);\n    }\n\n    describe '#parse' {\n        var retval, evtval;\n\n        beforeEach (done) {\n            parser.on('generic', function (message) {\n                evtval = message;\n                done();\n            });\n\n            retval = parser.parse(raw);\n        }\n\n        it 'Return value' {\n            assert(retval.prefix === prefix);\n            assert(retval.command === command);\n            assert(retval.params[0] === arg1);\n            assert(retval.params[1] === arg2);\n            assert(retval.params[2] === argr);\n        }\n\n        it 'Event Value' {\n            assert(evtval.prefix === prefix);\n            assert(evtval.command === command);\n            assert(evtval.params[0] === arg1);\n            assert(evtval.params[1] === arg2);\n            assert(evtval.params[2] === argr);\n        }\n\n        it 'Emit and Return value are the same' {\n            assert(retval === evtval);\n        }\n    }\n\n    describe '`*` event' {\n        it 'is called with every function' (done) {\n            var count = 0;\n\n            parser.on('*', function (message) {\n                count += 1;\n\n                if (count === 2) {\n                    done();\n                }\n            });\n\n            parser.parse(raw);\n            parser.parse(raw);\n        }\n    }\n}\n"],"sourceRoot":"/source/"}