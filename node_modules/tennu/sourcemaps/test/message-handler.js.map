{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/message-handler.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","log","console","bind","logger","info","notice","warn","error","MessageHandler","Message","id","ix","prefix","command","arg1","arg2","argr","raw","describe","parser","receiver","beforeEach","_id","retval","evtval","done","on","message","parse","it","params","count"],"mappings":"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","file":"message-handler.js","sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst log = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: log, info: log, notice: log, warn: log, error: log};\n\nconst MessageHandler = require('../lib/message-handler.js');\nconst Message = require('../lib/message.js');\n\nconst id = (function () {\n    var ix = 0;\n    return function () {\n        ix += 1;\n        return ix;\n    }\n})();\n\nconst prefix = 'irc.mibbit.net';\nconst command = 'generic';\nconst arg1 = 'arg1';\nconst arg2 = 'arg2';\nconst argr = 'rest args';\nconst raw = format(':%s %s %s %s :%s', prefix, command, arg1, arg2, argr);\n\ndescribe 'Message Parsers' {\n    var parser, receiver;\n\n    beforeEach {\n        log(/* newline */);\n\n        receiver = {_id: id()};\n        parser = MessageHandler(receiver, logger);\n    }\n\n    describe '#parse' {\n        var retval, evtval;\n\n        beforeEach (done) {\n            parser.on('generic', function (message) {\n                evtval = message;\n                done();\n            });\n\n            retval = parser.parse(raw);\n        }\n\n        it 'Return value' {\n            assert(retval.prefix === prefix);\n            assert(retval.command === command);\n            assert(retval.params[0] === arg1);\n            assert(retval.params[1] === arg2);\n            assert(retval.params[2] === argr);\n        }\n\n        it 'Event Value' {\n            assert(evtval.prefix === prefix);\n            assert(evtval.command === command);\n            assert(evtval.params[0] === arg1);\n            assert(evtval.params[1] === arg2);\n            assert(evtval.params[2] === argr);\n        }\n\n        it 'Emit and Return value are the same' {\n            assert(retval === evtval);\n        }\n    }\n\n    describe '`*` event' {\n        it 'is called with every function' (done) {\n            var count = 0;\n\n            parser.on('*', function (message) {\n                count += 1;\n\n                if (count === 2) {\n                    done();\n                }\n            });\n\n            parser.parse(raw);\n            parser.parse(raw);\n        }\n    }\n}\n"],"sourceRoot":"/source/"}