{"version":3,"file":"plugin-help.sjs","names":[],"mappings":"","sources":["plugin-help.sjs"],"sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\n\nconst HelpPlugin = require('../tennu_plugins/help');\n\nconst moduleHelps = {\n    a: 'a *',\n    b: {\n        b: {\n            '*': 'b *',\n            b1: 'b 1',\n            b2: ['b 2_1', 'b 2_2'],\n            b3: {\n                '*': 'b 3 *'\n            },\n        },\n    },\n    c: {\n        c1: 'c 1'\n    },\n    d: ['d *_1', 'd *_2']\n};\n\nconst client = {\n    config: function (value) {\n        if (value === 'help-disabled') {\n            return false;\n        }\n    }\n};\n\ndescribe 'Help plugin' {\n    var instance, help, HELP_NOT_FOUND;\n\n    beforeEach {\n        logfn(/* newline */);\n\n        instance = HelpPlugin.init(client, {});\n        HELP_NOT_FOUND = instance.exports.HELP_NOT_FOUND;\n\n        instance.hooks.help('a', moduleHelps.a);\n        instance.hooks.help('b', moduleHelps.b);\n        instance.hooks.help('c', moduleHelps.c);\n        instance.hooks.help('d', moduleHelps.d);\n\n        help = instance.exports.help;\n    }\n\n    it 'returns HELP_NOT_FOUND for unknown topics' {\n        assert(help(['dnd']) === HELP_NOT_FOUND);\n    }\n\n    it 'returns HELP_NOT_FOUND for subtopics of unknown topics' {\n        assert(help(['dne', 'subtopic']) === HELP_NOT_FOUND);\n    }\n\n    it 'assigns the topic of the module name the value of the string when given a string' {\n        logfn(inspect(help(['a'])));\n        assert(help(['a']) === 'a *');\n    }\n\n    it 'assigns the topic of the module name the value of the array when given an array' {\n        logfn(inspect(help(['d'])));\n        assert(equal(help(['d']), ['d *_1', 'd *_2']));\n    }\n\n    it 'gives the * property of topics with an object value' {\n        assert(help(['b']) === 'b *');\n    }\n\n    it 'gives HELP_NOT_FOUND for topics with an object value without the * property' {\n        assert(help(['c']) === HELP_NOT_FOUND);\n    }\n\n    it 'gives the subtopic string value for subtopic type of string' {\n        logfn(inspect(help(['b', 'b1'])));\n        assert(help(['b', 'b1']) === 'b 1');\n    }\n\n    it 'gives the subtopic array value for subtopic type of array' {\n        logfn(inspect(help(['b', 'b2'])));\n        assert(equal(help(['b', 'b2']), ['b 2_1', 'b 2_2']));\n    }\n\n    it 'gives the * property of subtopic type of object' {\n        logfn(inspect(help(['b', 'b3'])));\n        assert(help(['b', 'b3']) === 'b 3 *');\n    }\n\n    it 'gives HELP_NOT_FOUND for nonexistent subtopic of existing topic' {\n        logfn(inspect(help(['b', 'b4'])));\n        assert(help(['b', 'b4']) === HELP_NOT_FOUND);\n    }\n}\n"],"sourceRoot":"/source/"}