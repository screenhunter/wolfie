{"version":3,"file":"plugin-lifetime.sjs","names":[],"mappings":"","sources":["plugin-lifetime.sjs"],"sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\n\nconst LifetimePlugin = require('../tennu_plugins/lifetime');\n\ndescribe 'Lifetime Plugin' {\n\tvar instance;\n\n\tbeforeEach {\n\t\tinstance = LifetimePlugin.init({});\n\t}\n\n\tit 'takes a callback on the \\'die\\' hook and fires when the \\'die\\' export is called' {\n\t\tvar spy = sinon.spy();\n\t\tinstance.hooks.die(undefined, spy);\n\n\t\tassert(!spy.called);\n\n\t\tinstance.exports.die(\"From\", \"Cause\");\n\n\t\tassert(spy.called);\n\t\tassert(spy.calledWith(\"From\", \"Cause\"));\n\n\t\t// Should be a no-op.\n\t\tinstance.exports.die(\"From2\", \"Cause2\");\n\n\t\t// Spy should only have been called once.\n\t\tassert(spy.calledOnce);\n\t}\n\n\tit 'can take multiple callbacks' {\n\t\tvar spy = sinon.spy();\n\t\tvar spy2 = sinon.spy();\n\n\t\tinstance.hooks.die(undefined, spy);\n\t\tinstance.hooks.die(undefined, spy2);\n\n\t\tinstance.exports.die(\"From\", \"Cause\");\n\n\t\tassert(spy.called);\n\t\tassert(spy2.called);\n\t}\n}"],"sourceRoot":"/source/"}