{"version":3,"file":"integration-lifetime.sjs","names":[],"mappings":"","sources":["integration-lifetime.sjs"],"sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = true;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst Client = require('../lib/client.js');\nconst NetSocket = require('../test-helpers/mock-net-socket.js');\n\nconst network = {\n    'nickname': 'testbot',\n    'username': 'testuser',\n    'server': 'irc.test.net',\n    'nickserv' : 'nickserv',\n    'auth-password' : 'testpass',\n    'channels' : ['#test'],\n};\n\nconst fakeWrite = function fakeWrite (message) {\n    fakeWrite.spy.apply(this, arguments);\n\n    message = message.substring(0, message.length - 2);\n    // console.log('Fakewrite called with message `' + message + '`');\n    try {\n        if (!this.connected) return;\n\n        switch (message) {\n            case 'JOIN :#test':\n            this.emit('data', [\n                ':testbot!testuser@localhost JOIN :#test',\n                ':irc.localhost.net 353 testbot = #test :@testbot',\n                ':irc.localhost.net 366 testbot #test :End of /NAMES list.\\r\\n'].join('\\r\\n'));\n            break;\n            case 'QUIT':\n            this.emit('data', 'ERROR :Closing Link: testbot[localhost] (Quit: testbot)\\r\\n');\n            break;\n            case 'NICK newNick':\n            this.emit('data', ':testbot!testuser@localhost NICK :newNick\\r\\n');\n            break;\n            case 'PART #test':\n            this.emit('data', ':testbot!testuser@localhost PART #test\\r\\n');\n            break;\n            case 'PRIVMSG nickserv :identify testpass':\n            this.emit('data', ':nickserv!services@test.net NOTICE testbot :Password accepted - you are now recognized.\\r\\n');\n            break;\n            default:\n            void 0;\n        }\n    } catch (e) {\n        console.log('ERROR');\n        console.log(e.stack);\n    }\n};\n\nconst boxfn = function (value) {\n    return function () { return value; };\n};\n\ndescribe \"Lifetime Integration Testing:\" {\n    var netsocket;\n\n    beforeEach {\n        netsocket = new NetSocket(logger);\n        netsocket.write = fakeWrite;\n        fakeWrite.spy = sinon.spy();\n    }\n\n    it only \"emits the `die` event when exiting normally\" (done) {\n        var config = Object.create(network);\n        config['restart'] = false;\n\n        var tennu = Client(config, {\n            NetSocket: boxfn(netsocket),\n            Logger: boxfn(logger)\n        });\n\n        tennu.connect();\n\n        tennu.getModule('lifetime').die(function (from, cause) {\n            assert(from === tennu);\n            assert(cause[0] === \"external request\");\n            assert(cause[1] === \"testing\");\n            assert(cause.length === 2);\n            done();\n        });\n\n    }\n}"],"sourceRoot":"/source/"}