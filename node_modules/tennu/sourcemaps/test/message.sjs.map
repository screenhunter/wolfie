{"version":3,"file":"message.sjs","names":[],"mappings":"","sources":["message.sjs"],"sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst Message = require('../lib/message');\n\nconst hostmask = 'sender!malicious@test.suite.net';\nconst nickname = 'buddy';\nconst server = 'server.network.net';\nconst channel = '#channel';\nconst arg1 = 'arg-1';\nconst arg2 = 'arg-2';\nconst restargs = 'rest arguments';\nconst reason = 'Because I want to.';\nconst nick1 = \"adam\";\nconst nick2 = \"beatrice\";\nconst nick3 = \"charlie\";\n\nconst messages = {\n    generic:                    format('GENERIC'),\n    generic_args:               format('GENERIC %s %s :%s', arg1, arg2, restargs),\n    generic_prefix_server_args: format(':%s GENERIC %s %s :%s', server, arg1, arg2, restargs),\n    generic_prefix_hostmask:    format(':%s GENERIC', hostmask),\n    generic_oddspacing:         format('GENERIC    %s     %s    :%s', arg1, arg2, 'rest arguments    '),\n\n    privmsg_channel:            format(':%s PRIVMSG %s :%s', hostmask, channel, 'somebody said something'),\n    privmsg_query:              format(':%s PRIVMSG %s :%s', hostmask, nickname, 'hi hi'),\n    privmsg_oddspacing:         ':sender!user@localhost PRIVMSG #test :    testbot:     testcommand     ',\n\n    join:                       format(':%s JOIN %s', hostmask, channel),\n\n    part:                       format(':%s PART %s', hostmask, channel),\n    part_reason:                format(':%s PART %s :%s', hostmask, channel, reason),\n\n    quit:                       format(':%s QUIT', hostmask),\n    quit_reason:                format(':%s QUIT :%s', hostmask, reason),\n    a_353_with_whitespace:      format(':%s 353 %s = %s :%s %s %s ', server, nickname, channel, nick1, nick2, nick3)\n};\n\ndescribe 'Message' {\n    describe 'common properties' {\n        it 'for no-args, no-prefix, no-tags' {\n            const message = Message(messages.generic);\n\n            assert(message.command === 'generic');\n            assert(equal(message.params, []));\n            assert(message.prefix === '');\n            assert(equal(message.tags, {}));\n            assert(message.hostmask === null);\n        }\n\n        it 'for args, no-prefix, no-tags' {\n            const message = Message(messages.generic_args);\n\n            assert(message.command === 'generic')\n            assert(equal(message.params, [arg1, arg2, restargs]));\n            assert(message.prefix === '');\n            assert(equal(message.tags, {}));\n            assert(message.hostmask === null);\n        }\n\n        it 'for args, server prefix, no-tags' {\n            const message = Message(messages.generic_prefix_server_args);\n\n            assert(message.command === 'generic');\n            assert(equal(message.params, [arg1, arg2, restargs]));\n            assert(message.prefix === server);\n            assert(equal(message.tags, {}));\n            assert(message.hostmask === null);\n        }\n\n        it 'for no-args, hostmask prefix, no-tags' {\n            const message = Message(messages.generic_prefix_hostmask);\n\n            assert(message.command === 'generic');\n            assert(equal(message.params, []));\n            assert(message.prefix === hostmask);\n            assert(equal(message.tags, {}));\n            assert(equal(message.hostmask, {nickname: 'sender', username: 'malicious', hostname: 'test.suite.net'}));\n            assert(message.nickname === message.hostmask.nickname);\n        }\n\n        it 'handles odd spacing' {\n            const message = Message(messages.generic_oddspacing);\n\n            assert(message.command === 'generic');\n            assert(equal(message.params, [arg1, arg2, 'rest arguments    ']));\n            assert(message.prefix === '');\n            assert(equal(message.tags, {}));\n            assert(message.hostmask === null);\n        }\n    }\n\n    describe 'of type:' {\n        describe 'privmsg:' {\n            it 'channel' {\n                const message = Message(messages.privmsg_channel);\n\n                assert(message.command === 'privmsg');\n                assert(!message.isQuery);\n                assert(message.nicknamename === message.hostmask.nicknamename)\n                assert(message.channel === '#channel');\n                assert(message.message === 'somebody said something');\n            }\n\n            it 'query' {\n                const message = Message(messages.privmsg_query);\n\n                assert(message.command === 'privmsg');\n                assert(message.channel === 'sender');\n\n                assert(message.isQuery)\n                assert(message.message === 'hi hi');\n            }\n\n            it 'odd spacing' {\n                const message = Message(messages.privmsg_oddspacing);\n\n                assert(message.params[0] === '#test');\n                assert(message.params[1] === '    testbot:     testcommand     ');\n\n                assert(message.command === 'privmsg');\n                assert(message.channel === '#test');\n\n                assert(!message.isQuery);\n                assert(message.message === 'testbot:     testcommand');\n            }\n        }\n\n        it 'join' {\n            const message = Message(messages.join);\n\n            assert(message.channel === channel);\n        }\n\n        describe 'part:' {\n            it 'with reason' {\n                const message = Message(messages.part_reason);\n\n                assert(message.channel === channel);\n                assert(message.reason === reason);\n            }\n\n            it 'without reason' {\n                const message = Message(messages.part);\n\n                assert(message.channel === channel);\n                assert(message.reason === undefined);\n                assert(message.hasOwnProperty('reason'));\n            }\n        }\n\n        describe 'quit:' {\n            it 'with reason' {\n                const message = Message(messages.quit_reason);\n\n                assert(message.reason === reason);       \n            }\n\n            it 'without reason' {\n                const message = Message(messages.quit);\n\n                assert(message.reason === undefined);\n                assert(message.hasOwnProperty('reason'));   \n            }\n        }\n\n        describe '353:' {\n            it 'creates correct nicknames array' {\n                var message = Message(messages.a_353_with_whitespace);\n\n                assert(message.nicknames.length === 3);\n                assert(message.nicknames[0] === \"adam\");\n                assert(message.nicknames[1] === \"beatrice\");\n                assert(message.nicknames[2] === \"charlie\");\n            }\n        }\n    }\n}"],"sourceRoot":"/source/"}