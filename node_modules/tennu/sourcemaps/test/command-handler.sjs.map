{"version":3,"file":"command-handler.sjs","names":[],"mappings":"","sources":["command-handler.sjs"],"sourcesContent":["const sinon = require('sinon');\nconst assert = require('better-assert');\nconst equal = require('deep-eql');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nrequire('source-map-support').install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst CommandHandler = require('../lib/command-handler.js');\nconst Message = require('../lib/message.js');\nconst Promise = require('bluebird');\n\nconst config = {\n    'command-trigger': '!'\n};\n\nconst prefix = 'sender!user@localhost';\nconst commandname = 'command';\nconst channel = '#test';\nconst sender = 'sender';\nconst nickname = 'testbot';\nconst arg1 = 'arg-1';\nconst arg2 = 'arg-2';\n\nconst nicknamefn = function () { return nickname; };\n\nconst chanmsg = function (message) {\n    return format(format(':%s PRIVMSG %s :%s', prefix, channel, message));\n};\nconst privmsg = function (message) {\n    return format(format(':%s PRIVMSG %s :%s', prefix, nickname, message));\n};\n\nconst messages = {\n    noncommand:               chanmsg('hello'),\n    command:                  privmsg(format('%s',            commandname)),\n    detect: {\n        trigger:              chanmsg(format('!%s',           commandname)),\n        highlight:            chanmsg(format('%s: %s',        nickname, commandname)),\n        case_insensitive_highlight: chanmsg(format('%s: %s',  nickname.toUpperCase(), commandname)),\n        query:                privmsg(format('%s',            commandname)),\n        query_with_trigger:   privmsg(format('!%s',           commandname)),\n        highlight_oddspacing: chanmsg(format('  %s:   %s   ', nickname, commandname)),\n    },\n    args:                     privmsg(format('%s %s %s',      commandname, arg1, arg2)),\n    args_oddspacing:          privmsg(format('%s  %s   %s  ', commandname, arg1, arg2)),\n};\n\ndescribe 'Command Handler' {\n    var handler, receiver;\n\n    beforeEach {\n        receiver = {\n            say: sinon.spy()\n        };\n\n        handler = CommandHandler(config, receiver, nicknamefn, logger);\n    }\n\n    describe 'command detection:' {\n        it 'ignores non-commands by returning undefined' {\n            const message = Message(messages.noncommand);\n            assert(handler.parse(message) === undefined);\n        }\n\n        describe 'Recognition Types:' {\n            it 'Trigger' {\n                const command = handler.parse(Message(messages.detect.trigger));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n\n            it 'Highlights' {\n                const command = handler.parse(Message(messages.detect.highlight));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n\n            it 'Highlights in case insensitive way' {\n                const command = handler.parse(Message(messages.detect.case_insensitive_highlight));\n                \n                assert(command.command === commandname);\n                assert(equal(command.args, []));            \n            }\n\n            it 'Query' {\n                const command = handler.parse(Message(messages.detect.query));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n\n            it 'Query with trigger' {\n                const command = handler.parse(Message(messages.detect.query_with_trigger));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n        }\n\n        it '\"args\" property an array of the words of the message' {\n            const command = handler.parse(Message(messages.args));\n\n            assert(command.command === commandname);\n            assert(equal(command.args, [arg1, arg2]));\n        }\n\n        describe 'Odd Spacing:' {\n            it 'Highlight' {\n                const command = handler.parse(Message(messages.detect.highlight_oddspacing));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, []));\n            }\n\n            it 'Args' {\n                const command = handler.parse(Message(messages.args_oddspacing));\n\n                assert(command.command === commandname);\n                assert(equal(command.args, [arg1, arg2]));\n            }\n        }\n\n        describe 'events are emitted' {\n            it 'of the command name' (done) {\n                handler.on(commandname, function (command) {\n                    assert(command.command === commandname);\n                    done();\n                });\n\n                handler.parse(Message(messages.command));\n            }\n        }\n    }\n\n    describe 'Response handling' {\n        it 'no response' (done) {\n            handler.after(function () {\n                try {\n                    logfn('After function called.');\n                    assert(!receiver.say.called);\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n\n            handler.on(commandname, function () {\n                return undefined;\n            });\n\n            handler.parse(Message(messages.command));\n        }\n\n        it 'string response' (done) {\n            receiver.say = function (_sender, response) {\n                try {\n                    assert(sender === _sender);\n                    assert(response === 'response');\n                    assert(arguments.length === 2);\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, function () {\n                return 'response';\n            });\n\n            handler.parse(Message(messages.command, receiver));\n        }\n\n        it '[string] response' (done) {\n            receiver.say = function (_sender, response) {\n                try {\n                    assert(sender === _sender);\n                    assert(equal(response, ['response']));\n                    assert(arguments.length === 2);\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, function () {\n                return ['response'];\n            });\n\n            handler.parse(Message(messages.command, receiver));\n        }\n\n        it 'Promise<string> response' (done) {\n            receiver.say = function (_sender, response) {\n                try {\n                    assert(sender === _sender);\n                    assert(response === 'response');\n                    assert(arguments.length === 2);\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, function () {\n                return Promise.resolve('response');\n            });\n\n            handler.parse(Message(messages.command, receiver));\n        }\n\n        it 'Promise<[string]> response' (done) {\n            receiver.say = function (_sender, response) {\n                try {\n                    assert(sender === _sender);\n                    assert(equal(response, ['response']));\n                    assert(arguments.length === 2);\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, function () {\n                return Promise.resolve(['response']);\n            });\n\n            handler.parse(Message(messages.command, receiver));\n        }\n\n        it 'Promise<string> after Promise#catch()' (done) {\n            const failHandler = function (command) {\n                return Promise\n                .reject(new Error())\n                .catch(function (err) {\n                    console.log(\"Returning sorry!\");\n                    return 'Sorry!';\n                });\n            };\n\n            receiver.say = function (sender, response) {\n                try {\n                    assert(response === 'Sorry!');\n                    done();   \n                } catch (e) {\n                    done(e);\n                }\n            };\n\n            handler.on(commandname, failHandler);\n\n            handler.parse(Message(messages.command, receiver));\n        }\n    }\n}"],"sourceRoot":"/source/"}